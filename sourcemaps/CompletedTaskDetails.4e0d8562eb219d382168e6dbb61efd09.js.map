{"version":3,"file":"js/CompletedTaskDetails.d81450137715b39ba41f.js","mappings":"gHAEAA,EAAQ,GAAgC,CACtCC,KAAM,0BACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,mcACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAA0B,oBAAoCA,EAAQ,IAC9EA,EAAA,GAAqBA,EAAQ,E,kBCT7BA,EAAQ,GAAuB,CAC7BC,KAAM,iBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,kZACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAiB,oBAAoCA,EAAQ,IACrEA,EAAA,GAAqBA,EAAQ,E,oPCNvBO,EAAgB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC9B,OACE,kBAAC,EAAAC,MAAD,KACGF,EACC,kBAAC,aAAD,KACE,kBAAC,EAAAG,UAAD,CAAWC,MAAO,CAAEC,aAAc,QAChC,kBAAC,KAAD,CAAuBC,MAAM,aAE/B,kBAAC,EAAAH,UAAD,CAAWC,MAAO,CAAEC,aAAc,SAChC,0BAAMD,MAAO,CAAEE,MAAO,YAAtB,WAGF,KACJ,kBAAC,EAAAH,UAAD,CAAWG,MAAM,WAAWL,GAGjC,EAEDF,EAAcQ,UAAY,CACxBP,MAAOO,IAAAA,KACPN,QAASM,IAAAA,QAGX,U,0BCrBMC,EAAiB,SAAC,EAA0BC,GAAU,IAGxC,EAHMC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,aAC1BC,GAASC,EAAAA,EAAAA,KAEf,OAAIF,GACKG,EAAAA,EAAAA,GACLJ,EACAC,EAFqB,uBAGLF,GAChBG,SAJqB,UAIrBA,EAAQG,cAJa,aAIrB,OAAAH,IAGK,0BAAMR,MAAO,CAAEE,MAAO,YAAtB,iBAEV,EAEDE,EAAeD,UAAY,CACzBG,OAAQH,IAAAA,OACRI,aAAcJ,IAAAA,MAGT,IAAMS,EAAe,CAC1BC,MAAO,cACPC,MAAO,CACLvB,MAAO,IAETwB,WAAY,eACZC,aAAc,SAACC,GAAD,OAASA,EAAIV,cAAgB,gBAA7B,EACdW,YAAYC,EAAAA,EAAAA,IAAsBf,IAGvBgB,EAAe,CAC1BP,MAAO,SACPC,MAAO,CACLvB,MAAO,IAETwB,WAAY,SACZC,aAAc,SAACC,GAAD,OAASA,EAAII,MAAb,GAGHC,EAAgB,CAC3BT,MAAO,UACPC,MAAO,CACLvB,MAAO,IAETgC,eAAgB,SAACN,GAAD,OAASA,EAAIO,QAAQC,OAArB,EAChBT,aAAc,SAACC,GAAD,OAASA,EAAIO,QAAQC,OAArB,EACdP,WAAY,SAACQ,EAAGC,EAAQV,GAAZ,OACV,kBAAC,EAAD,CACEpB,QAASoB,EAAIO,QAAQC,QACrB7B,MACEqB,EAAIO,QAAQ5B,OACG,YAAfqB,EAAII,QACW,YAAfJ,EAAII,QANE,GAYDO,EAAoB,CAAChB,EAAcQ,EAAcE,GAE9D,SAAgBV,EAAcQ,EAAcE,G,eCjE/BO,EAAe,CAC1B,CACEC,KAAMC,EAAAA,EAAAA,KACNC,MAAO,OACPC,OAAQ,SAACC,EAAMC,GAAP,OACND,EAAKD,QAAO,SAAChB,GAAD,OACVA,EAAIV,aACAU,EAAIV,aAAa6B,cAAcC,SAASF,EAAMC,eAC9C,IAHM,GADN,IASCE,EAAgB,CAC3B,CACER,KAAMC,EAAAA,EAAAA,SACNC,MAAO,SACPC,OAAQ,SAACC,EAAMC,GAAP,OACND,EAAKD,QAAO,SAAChB,GAAD,OAASkB,EAAME,SAASpB,EAAII,OAAOe,cAAnC,GADN,EAERG,MAAO,CACL,CAAEP,MAAO,UAAWG,MAAO,WAC3B,CAAEH,MAAO,UAAWG,MAAO,WAC3B,CAAEH,MAAO,UAAWG,MAAO,WAC3B,CAAEH,MAAO,UAAWG,MAAO,c,kHCpB3BK,EAAa,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAS3B,GAAY,YACzC,OAAO,kBAAC,EAAA4B,MAAD,UAAU5B,EAAV,CAAiB6B,GAAIF,IAC7B,EAEDD,EAAWrC,UAAY,CACrBsC,KAAMtC,IAAAA,QAGR,IAAMyC,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAa/B,GAAhB,mBACzB,kBAAC,EAAAgC,gBAAD,UAAoBhC,EAApB,CAA2BiC,UAAWP,IACnCK,EAFsB,EAM3BD,EAAmBzC,UAAY,CAC7B0C,SAAU1C,IAAAA,MAGZ,U,sECfM6C,EAAW,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,SAAUpC,EAAY,EAAZA,MA6C5B,OACE,8BA5CiB,SAAboC,EAEA,0BAAMjD,MAAO,CAAEkD,YAAa,QAC1B,kBAAC,KAAD,CAAgBhD,MAAM,aAGJ,QAAb+C,EAEP,0BAAMjD,MAAO,CAAEkD,YAAa,QAC1B,kBAAC,KAAD,CAAyBhD,MAAM,aAGb,SAAb+C,EAEP,0BAAMjD,MAAO,CAAEkD,YAAa,QAC1B,kBAAC,KAAD,CAAuBhD,MAAM,kBAH5B,EAUU,SAAb+C,EAEA,0BAAMjD,MAAO,CAAEE,MAAO,YACpB,gCAASW,IAGS,QAAboC,EAEP,0BAAMjD,MAAO,CAAEE,MAAO,YACpB,gCAASW,IAGS,SAAboC,EAEP,0BAAMjD,MAAO,CAAEE,MAAO,YACpB,gCAASW,SAHR,EAeV,EAEDmC,EAAS7C,UAAY,CACnB8C,SAAU9C,IAAAA,OACVU,MAAOV,IAAAA,QAGT,WC9DA,IAAMgD,GAAgB,SAAC,GAA0B,IAAxBjD,EAAwB,EAAxBA,MAAOkD,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpC,OACE,kBAAC,EAAAC,MAAD,CACEpD,MAAOA,EACPkD,KAAMA,EACNpD,MAAO,CAAEuD,UAAW,OAAQC,aAAc,OAC1CC,UAAU,gBAETJ,EAGN,EAEDF,GAAchD,UAAY,CACxBD,MAAOC,IAAAA,OACPiD,KAAMjD,IAAAA,IACNkD,KAAMlD,IAAAA,QAGR,YCbA,IAAMuD,GAAe,SAAC,GAAc,IAAZC,EAAY,EAAZA,MACdC,EAA0CD,EAA1CC,OAAQC,EAAkCF,EAAlCE,IAAKZ,EAA6BU,EAA7BV,SAAUa,EAAmBH,EAAnBG,QAASjD,EAAU8C,EAAV9C,MA4ClCkD,EAAa,SAACC,EAAgBC,GAClC,OACE,kBAAC,EAAAC,KAAD,CAAMC,WAAS,EAACV,UAAU,sBACxB,kBAAC,EAAAW,SAAD,CAAUC,KAAM,EAAGZ,UAAU,wBAC1BO,GAEH,kBAAC,EAAAI,SAAD,CAAUE,IAAK,EAAGC,GAAI,EAAGC,EAAG,EAAGC,EAAG,EAAGC,GAAI,GACZ,mBAAnBT,EACJA,IACAA,GAIX,EAcD,OACE,kBAAC,aAAD,KACE,6BAtEe,SAAbhB,EAEA,kBAAC,GAAD,CAAe/C,MAAM,OAAOkD,KAAM,kBAAC,KAAD,MAAoBC,KAAK,SAEvC,QAAbJ,EAEP,kBAAC,GAAD,CACE/C,MAAM,SACNkD,KAAM,kBAAC,KAAD,MACNC,KAAK,aAGa,SAAbJ,EAEP,kBAAC,GAAD,CACE/C,MAAM,MACNkD,KAAM,kBAAC,KAAD,MACNC,KAAK,mBALJ,GA2DL,yBAAKI,UAAU,eAAe5C,GAC9B,6BAdA,kBAAC,aAAD,KACGkD,EAAW,UAAWD,GACtBF,SAAAA,EAAQe,aACLZ,EAAW,eAtCa,WAChC,OAAOH,EAAOe,aAAaC,KAAI,SAACC,EAAaxE,GAC3C,IAAIyE,EAAiB,eAAH,OAAkBzE,GACpC,OACE,yBAAKwD,IAAKiB,GACPzE,EAAQ,EACP,8BACE,8BAEA,KACJ,0BAAML,MAAO,CAAE+E,WAAY,kBAA3B,IACIF,EAAY/C,KADhB,KACwB+C,EAAYG,SAIzC,GACF,IAuBS,KACHjB,EAAW,MAAOF,KAY1B,EAEDH,GAAavD,UAAY,CACvBwD,MAAOxD,IAAAA,QAGT,YC3FA,IAsBa8E,GAAmB,SAACC,EAASC,GACxC,IACIC,EADAC,EAAO,GAaX,OAXIF,GACFC,EA1BmB,SAACF,GAmBtB,OAlBoBA,EAAQI,MAAK,SAACC,EAAGC,GACnC,MACkB,SAAfD,EAAEtC,UAAsC,SAAfuC,EAAEvC,UACZ,QAAfsC,EAAEtC,UAAqC,SAAfuC,EAAEvC,UAEnB,EAIQ,SAAfuC,EAAEvC,UAAsC,SAAfsC,EAAEtC,UACZ,QAAfuC,EAAEvC,UAAqC,SAAfsC,EAAEtC,SAEpB,EAGF,CACR,GAGF,CAMmBwC,CAAeP,GAC/BG,EAAOD,EAAcR,KAAI,SAACjB,GAAD,MAAY,CACnC+B,OAAQ,kBAAC,GAAD,CAAUzC,SAAUU,EAAMV,SAAUpC,MAAO8C,EAAM9C,QACzD8E,MAAO,kBAAC,GAAD,CAAchC,MAAOA,IAFL,KAMzB0B,GADAD,EAAgBF,GACK,GAGhBG,CACR,E,qlBClCD,IAAMO,GAAiB,SAAC,GAA+B,IAkD5B,EAlDDC,EAA6B,EAA7BA,SAAUV,EAAmB,EAAnBA,aAC9BW,EAAW,EAEf,GAAgCC,EAAAA,EAAAA,UAC9BC,OAAOC,YACLD,OAAOd,QAAQW,GAAUjB,KAAI,kBAAS,EAAT,eAAasB,SAAQ,GAArB,MAFjC,eAAOC,EAAP,KAAiBC,EAAjB,KAMMC,EAAwB,SAACC,EAAOC,GACpCH,EAAY,GAAD,MACND,GADM,cAERI,GAAaJ,EAASI,KAE1B,EA2DD,OAtBMpB,EACKU,EAASjB,KAAI,SAAC4B,EAAKD,GACxB,OACE,kBAAC,aAAD,CAAgB1C,IAAK0C,GAtCL,SAACb,EAAQa,GAC/B,IAAIE,EACF,kBAAC,EAAAC,GAAD,CAAI7C,IAAKiC,GACP,kBAAC,EAAAa,GAAD,CACEC,OAAQ,CACNd,SAAUS,EACVM,WAAYV,EAASI,GACrBO,SAAUT,KAGd,kBAAC,EAAAM,GAAD,KAAKjB,IAKT,OADAI,GAAY,EACLW,CACR,CAuBUM,CAAgBP,EAAId,OAAQa,GArBhB,SAACZ,EAAOY,GAC7B,IAAIS,EACF,kBAAC,EAAAN,GAAD,CACEjD,WAAmC,IAAxB0C,EAASI,GAAsB,gBAAkB,KAC5D1C,IAAKiC,EACLe,YAAoC,IAAxBV,EAASI,IAErB,kBAAC,EAAAI,GAAD,MACA,kBAAC,EAAAA,GAAD,KAAKhB,IAKT,OADAG,GAAY,EACLkB,CACR,CAQUC,CAAeT,EAAIb,MAAOY,GAGhC,IAGC,kBAAC,EAAAW,UAAD,CACElH,OAAK,eACFmH,GAAAA,uCAAAA,KAA8CC,GAAAA,uBAD5C,2BAEc,WAFd,IAKL,kBAAC,EAAAC,cAAD,KAAgBxB,GAMzB,EAEDD,GAAezF,UAAY,CACzBgF,aAAchF,IAAAA,KACd0F,SAAU1F,IAAAA,OAGZ,YClFA,IAAMmH,GAAoB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACrBpC,IAAeoC,EAAK/F,QAAQgG,YAE5B3B,EAAW0B,EAAK/F,QAAQgG,YAC1BvC,GAAiBsC,EAAK/F,QAAQgG,YAAYtC,QAASC,GACnDF,GAAiB,CAACsC,EAAK/F,QAAQiG,QAAStC,GAE5C,OACE,6BACE,kBAAC,EAAAuC,gBAAD,CACEC,QAAQ,UACR3H,MAAO,CACLwD,aAAc,OACd,0DAA2D,MAG7D,kBAAC,EAAAoE,MAAD,KACE,kBAAC,GAAD,CAAgB/B,SAAUA,EAAUV,aAAcA,MAK3D,EAEDmC,GAAkBnH,UAAY,CAC5BoH,KAAMpH,IAAAA,QAGR,Y,ykBC4LA,SAjL6B,WAAM,MACzB0H,GAAOC,EAAAA,EAAAA,aAAPD,GACR,GACE9B,EAAAA,EAAAA,UAASgC,EAAAA,IADX,eAAOC,EAAP,KAA6BC,EAA7B,KAEA,GACElC,EAAAA,EAAAA,UAASmC,EAAAA,IADX,eAAOC,EAAP,KAA0BC,EAA1B,KAEA,GAAwCrC,EAAAA,EAAAA,WAAS,GAAjD,eAAOsC,EAAP,KAAqBC,EAArB,KACA,GAA0BvC,EAAAA,EAAAA,YAA1B,eAAOwC,EAAP,KAAcC,EAAd,KACA,GAAoDzC,EAAAA,EAAAA,WAAS,GAA7D,eAAO0C,EAAP,KAA2BC,EAA3B,KACA,GAA8C3C,EAAAA,EAAAA,UAAS,IAAvD,eAAO4C,EAAP,KAAwBC,EAAxB,KACA,IACE7C,EAAAA,EAAAA,WAAS,GADX,iBAAO8C,GAAP,MAAkCC,GAAlC,MAEA,IAAgC/C,EAAAA,EAAAA,WAAS,GAAzC,iBAAOgD,GAAP,MAAiBC,GAAjB,MACA,IAAgCjD,EAAAA,EAAAA,WAAS,GAAzC,iBAAOkD,GAAP,MAAiBC,GAAjB,MACMC,IAAUC,EAAAA,EAAAA,cACV5I,IAASC,EAAAA,EAAAA,KACf,IAAiC4I,EAAAA,EAAAA,IAAe,YAAa,CAC3D,gBACA,qBAFMC,GAAR,GAAQA,UAAWC,GAAnB,GAAmBA,UAKbC,GAAS,mCAAG,6FAChBlB,GAAgB,GADA,SAEVL,EAAwBF,EAAAA,IAFd,uBAGVK,EAAqBF,EAAAA,IAHX,wBAIiBuB,EAAAA,EAAAA,IAAU5B,EAAIW,GAJ/B,UAIVkB,EAJU,QAMZ1D,OAAO2D,KAAKD,GAAoBE,OANpB,mCAOgBC,EAAAA,EAAAA,IAAcH,EAAoBlB,GAPlD,aAORsB,EAPQ,QASMF,OATN,kCAUN3B,EAAwByB,GAVlB,yBAWNtB,EAAqB0B,GAXf,QAchBxB,GAAgB,GAdA,4CAAH,qDA4Cf,OA3BAyB,EAAAA,EAAAA,YAAU,WACRP,IACD,GAAE,CAAC3B,KAEJkC,EAAAA,EAAAA,YAAU,WACR/B,GACExH,GAAOwJ,oBAAP,UACKhC,EAAqBiC,WAD1B,+BAGH,GAAE,CAACzJ,GAAQwH,KAEZ+B,EAAAA,EAAAA,YAAU,WACRnB,GAAmBsB,EAAAA,EAAAA,IAAmB/B,GACvC,GAAE,CAACA,KAEJ4B,EAAAA,EAAAA,YAAU,WACJhB,KACFI,GAAQgB,KAAK,aACbnB,IAAY,IAGVC,KACFO,KACAN,IAAY,GAEf,GAAE,CAACD,GAAUF,KAGZ,6BACE,kBAACqB,EAAA,EAAD,CACEC,YAAarC,EAAqBsC,iBAClC/B,MAAOA,EACPgC,OAAQ9B,EACRE,gBAAiBA,EACjB6B,eAAgB9B,EAChB+B,KAAMzC,EAAqB0C,UAC3B7J,MAAOmH,EAAqBiC,aAE9B,kBAACU,EAAA,EAAD,CACE9C,GAAIG,EAAqBH,GACzB0C,OAAQ1B,GACRK,YAAaA,GACbF,YAAaA,GACbwB,eAAgB1B,GAChB8B,UAAW5C,EAAqB6C,WAChCxJ,OAAQ2G,EAAqB3G,OAC7BR,MAAOmH,EAAqBiC,aAE7B1B,EACC,kBAACuC,EAAA,EAAD,CACE1H,KAAM2H,EAAAA,GACN7K,MAAM,UACNW,MAAO,2BACPwC,KAAM2H,EAAAA,GACNzC,MAAK,gBAAWA,SAAX,UAAWA,EAAO0C,gBAAlB,aAAW,EAAiB5J,OAA5B,aAAuCkH,aAAvC,EAAuCA,EAAO9G,WAGrD,kBAAC,aAAD,KACE,kBAACyJ,EAAA,EAAD,KACE,kBAAC,EAAAC,WAAD,CAAYC,OAAO,sCACjB,kBAAC,EAAD,CAAoBzI,GAAG,aAAvB,SACA,kBAAC,EAAAG,eAAD,CAAgBuI,UAAQ,GACrBrD,EAAqBiC,aAG1B,kBAAC,EAAAqB,KAAD,CAAMC,UAAW,CAAEC,QAAS,SAAUC,GAAI,QACxC,kBAAC,EAAAH,KAAD,CACEC,UAAW,CAAEC,QAAS,UACtBE,KAAM,CAAEF,QAAS,WAEjB,kBAAC,EAAAG,SAAD,KACE,kBAACC,EAAA,EAAD,CAAiB/K,MAAOmH,EAAqBiC,cAE/C,kBAAC,EAAA0B,SAAD,KAAW3D,EAAqBsC,mBAElC,kBAACuB,EAAA,EAAD,CACEC,KAAM9D,EACN+D,cAAcC,EAAAA,EAAAA,IACZhE,EAAqB0C,UACrBhC,EACAV,EAAqB3G,OACrByH,IAEFmD,UAAWC,EAAAA,OAIjB,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAAC,KAAD,KACE,kBAAC,EAAAd,KAAD,CACE7H,UAAU,qCACV4I,eAAgB,CAAEb,QAAS,8BAC3BD,UAAW,CAAEC,QAAS,SAAUC,GAAI,QAEpC,kBAACI,EAAA,EAAD,CACEC,KAAM9D,EACN+D,aAAcO,EAAAA,GACdL,UAAWM,EAAAA,OAIjB,6BACA,kBAAC,EAAAH,KAAD,MACI7C,IAAaD,GACb,kBAACkD,EAAA,EAAD,CACExK,MAAK,UAAKgG,EAAqBH,GAA1B,mBACLuD,OAAM,UAAKpD,EAAqBH,GAA1B,yBACN4E,QAASA,EACTlK,MAAO4F,EACPuE,QAAS,CACPC,aAAc,GAAF,eAAM9K,IAAN,OAAuBS,KAErCsK,QAAO,SACFC,EAAAA,IADE,IAELC,WAAY,SACPD,EAAAA,GAAAA,YADK,IAERJ,QAAS7K,IAEXmL,iBAAkB5E,EAAkB6E,MAAK,SAAC/L,GAAD,OACvCgM,EAAAA,EAAAA,IAAWhM,EAD4B,IAGrCqG,QACA4F,IAENC,WAAWA,EAAAA,EAAAA,GAAU,QACrBC,gBAAc,EACdC,eAAgBhF,IAGlB,kBAACiF,EAAA,EAAD,CAAeC,YAAY,iBAQ1C,C","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/info-circle-icon.js","webpack:///./src/PresentationalComponents/SplitMessages/SplitMessages.js","webpack:///./src/SmartComponents/CompletedTaskDetails/Columns.js","webpack:///./src/SmartComponents/CompletedTaskDetails/Filters.js","webpack:///./src/PresentationalComponents/BreadcrumbLinkItem/BreadcrumbLinkItem.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/EntryRow.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/EntryRowLabel.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/EntryDetails.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/jobResultsDetailsHelpers.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/ExpandedIssues.js","webpack:///./src/SmartComponents/CompletedTaskDetails/JobResultsDetails/JobResultsDetails.js","webpack:///./src/SmartComponents/CompletedTaskDetails/CompletedTaskDetails.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationTriangleIcon = require('../createIcon').createIcon(exports.ExclamationTriangleIconConfig);\nexports[\"default\"] = exports.ExclamationTriangleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.InfoCircleIconConfig = {\n  name: 'InfoCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InfoCircleIcon = require('../createIcon').createIcon(exports.InfoCircleIconConfig);\nexports[\"default\"] = exports.InfoCircleIcon;","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\n\nconst SplitMessages = ({ alert, content }) => {\n  return (\n    <Split>\n      {alert ? (\n        <React.Fragment>\n          <SplitItem style={{ paddingRight: '8px' }}>\n            <ExclamationCircleIcon color=\"#C9190B\" />\n          </SplitItem>\n          <SplitItem style={{ paddingRight: '16px' }}>\n            <span style={{ color: '#C9190B' }}>Alert</span>\n          </SplitItem>\n        </React.Fragment>\n      ) : null}\n      <SplitItem color=\"#A30000\">{content}</SplitItem>\n    </Split>\n  );\n};\n\nSplitMessages.propTypes = {\n  alert: propTypes.bool,\n  content: propTypes.string,\n};\n\nexport default SplitMessages;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { renderColumnComponent } from '../../Utilities/helpers';\nimport SplitMessages from '../../PresentationalComponents/SplitMessages/SplitMessages';\nimport { createSystemLink } from '../../helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst SystemNameCell = ({ system, display_name }, index) => {\n  const chrome = useChrome();\n\n  if (display_name) {\n    return createSystemLink(\n      system,\n      display_name,\n      `system-title-${index}`,\n      chrome?.isBeta?.()\n    );\n  } else {\n    return <span style={{ color: '#72767B' }}>System deleted</span>;\n  }\n};\n\nSystemNameCell.propTypes = {\n  system: propTypes.string,\n  display_name: propTypes.node,\n};\n\nexport const SystemColumn = {\n  title: 'System name',\n  props: {\n    width: 30,\n  },\n  sortByProp: 'display_name',\n  renderExport: (job) => job.display_name || 'System deleted',\n  renderFunc: renderColumnComponent(SystemNameCell),\n};\n\nexport const StatusColumn = {\n  title: 'Status',\n  props: {\n    width: 10,\n  },\n  sortByProp: 'status',\n  renderExport: (job) => job.status,\n};\n\nexport const MessageColumn = {\n  title: 'Message',\n  props: {\n    width: 35,\n  },\n  sortByFunction: (job) => job.results.message,\n  renderExport: (job) => job.results.message,\n  renderFunc: (_, _empty, job) => (\n    <SplitMessages\n      content={job.results.message}\n      alert={\n        job.results.alert ||\n        job.status === 'Failure' ||\n        job.status === 'Timeout'\n      }\n    />\n  ),\n};\n\nexport const exportableColumns = [SystemColumn, StatusColumn, MessageColumn];\n\nexport default [SystemColumn, StatusColumn, MessageColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const systemFilter = [\n  {\n    type: conditionalFilterType.text,\n    label: 'Name',\n    filter: (jobs, value) =>\n      jobs.filter((job) =>\n        job.display_name\n          ? job.display_name.toLowerCase().includes(value.toLowerCase())\n          : null\n      ),\n  },\n];\n\nexport const statusFilters = [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'Status',\n    filter: (jobs, value) =>\n      jobs.filter((job) => value.includes(job.status.toLowerCase())),\n    items: [\n      { label: 'Running', value: 'running' },\n      { label: 'Success', value: 'success' },\n      { label: 'Failure', value: 'failure' },\n      { label: 'Timeout', value: 'timeout' },\n    ],\n  },\n];\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { BreadcrumbItem } from '@patternfly/react-core';\n\nconst RouterLink = ({ href, ...props }) => {\n  return <Link {...props} to={href} />;\n};\n\nRouterLink.propTypes = {\n  href: propTypes.string,\n};\n\nconst BreadcrumbLinkItem = ({ children, ...props }) => (\n  <BreadcrumbItem {...props} component={RouterLink}>\n    {children}\n  </BreadcrumbItem>\n);\n\nBreadcrumbLinkItem.propTypes = {\n  children: propTypes.node,\n};\n\nexport default BreadcrumbLinkItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\n\nconst EntryRow = ({ severity, title }) => {\n  const renderIcon = () => {\n    if (severity === 'info') {\n      return (\n        <span style={{ marginRight: '8px' }}>\n          <InfoCircleIcon color=\"#2B9AF3\" />\n        </span>\n      );\n    } else if (severity === 'low') {\n      return (\n        <span style={{ marginRight: '8px' }}>\n          <ExclamationTriangleIcon color=\"#F0AB00\" />\n        </span>\n      );\n    } else if (severity === 'high') {\n      return (\n        <span style={{ marginRight: '8px' }}>\n          <ExclamationCircleIcon color=\"#C9190B\" />\n        </span>\n      );\n    }\n  };\n\n  const renderTitle = () => {\n    if (severity === 'info') {\n      return (\n        <span style={{ color: '#002952' }}>\n          <strong>{title}</strong>\n        </span>\n      );\n    } else if (severity === 'low') {\n      return (\n        <span style={{ color: '#795000' }}>\n          <strong>{title}</strong>\n        </span>\n      );\n    } else if (severity === 'high') {\n      return (\n        <span style={{ color: '#A30000' }}>\n          <strong>{title}</strong>\n        </span>\n      );\n    }\n  };\n\n  return (\n    <span>\n      {renderIcon()}\n      {renderTitle()}\n    </span>\n  );\n};\n\nEntryRow.propTypes = {\n  severity: propTypes.string,\n  title: propTypes.string,\n};\n\nexport default EntryRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Label } from '@patternfly/react-core';\n\nconst EntryRowLabel = ({ color, icon, text }) => {\n  return (\n    <Label\n      color={color}\n      icon={icon}\n      style={{ marginTop: '16px', marginBottom: '4px' }}\n      className=\"pf-m-compact\"\n    >\n      {text}\n    </Label>\n  );\n};\n\nEntryRowLabel.propTypes = {\n  color: propTypes.string,\n  icon: propTypes.any,\n  text: propTypes.string,\n};\n\nexport default EntryRowLabel;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\nimport EntryRowLabel from './EntryRowLabel';\n\nconst EntryDetails = ({ entry }) => {\n  const { detail, key, severity, summary, title } = entry;\n\n  const getLabelType = () => {\n    if (severity === 'info') {\n      return (\n        <EntryRowLabel color=\"blue\" icon={<InfoCircleIcon />} text=\"Info\" />\n      );\n    } else if (severity === 'low') {\n      return (\n        <EntryRowLabel\n          color=\"orange\"\n          icon={<ExclamationTriangleIcon />}\n          text=\"Low risk\"\n        />\n      );\n    } else if (severity === 'high') {\n      return (\n        <EntryRowLabel\n          color=\"red\"\n          icon={<ExclamationCircleIcon />}\n          text=\"High risk\"\n        />\n      );\n    }\n  };\n\n  const renderRemediationsDetails = () => {\n    return detail.remediations.map((remediation, index) => {\n      let remediationKey = `remediation-${index}`;\n      return (\n        <div key={remediationKey}>\n          {index > 0 ? (\n            <span>\n              <br />\n            </span>\n          ) : null}\n          <span style={{ fontFamily: 'overpass-mono' }}>\n            [{remediation.type}] {remediation.context}\n          </span>\n        </div>\n      );\n    });\n  };\n\n  const createGrid = (itemOneContent, itemTwoContent) => {\n    return (\n      <Grid hasGutter className=\"entry-detail-title\">\n        <GridItem span={2} className=\"entry-detail-content\">\n          {itemOneContent}\n        </GridItem>\n        <GridItem xl2={5} xl={5} l={6} m={7} sm={8}>\n          {typeof itemTwoContent === 'function'\n            ? itemTwoContent()\n            : itemTwoContent}\n        </GridItem>\n      </Grid>\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <React.Fragment>\n        {createGrid('Summary', summary)}\n        {detail?.remediations\n          ? createGrid('Remediation', renderRemediationsDetails)\n          : null}\n        {createGrid('Key', key)}\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <div>{getLabelType()}</div>\n      <div className=\"entry-title\">{title}</div>\n      <div>{renderDetails()}</div>\n    </React.Fragment>\n  );\n};\n\nEntryDetails.propTypes = {\n  entry: propTypes.object,\n};\n\nexport default EntryDetails;\n","import React from 'react';\nimport EntryRow from './EntryRow';\nimport EntryDetails from './EntryDetails';\n\nconst sortBySeverity = (entries) => {\n  let sortedEntries = entries.sort((a, b) => {\n    if (\n      (a.severity === 'high' && b.severity !== 'high') ||\n      (a.severity === 'low' && b.severity === 'info')\n    ) {\n      return -1;\n    }\n\n    if (\n      (b.severity === 'high' && a.severity !== 'high') ||\n      (b.severity === 'low' && a.severity === 'info')\n    ) {\n      return 1;\n    }\n\n    return 0;\n  });\n\n  return sortedEntries;\n};\n\nexport const buildResultsRows = (entries, isReportJson) => {\n  let rows = [];\n  let sortedEntries;\n  if (isReportJson) {\n    sortedEntries = sortBySeverity(entries);\n    rows = sortedEntries.map((entry) => ({\n      parent: <EntryRow severity={entry.severity} title={entry.title} />,\n      child: <EntryDetails entry={entry} />,\n    }));\n  } else {\n    sortedEntries = entries;\n    rows = sortedEntries[0];\n  }\n\n  return rows;\n};\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Tr, Td } from '@patternfly/react-table';\nimport { CodeBlock, CodeBlockCode } from '@patternfly/react-core';\nimport { c_code_block__header_BorderBottomColor } from '@patternfly/react-tokens';\nimport { global_palette_white } from '@patternfly/react-tokens';\n\nconst ExpandedIssues = ({ rowPairs, isReportJson }) => {\n  let rowIndex = 0;\n\n  const [expanded, setExpanded] = useState(\n    Object.fromEntries(\n      Object.entries(rowPairs).map(([k]) => [k, Boolean(false)])\n    )\n  );\n\n  const handleExpansionToggle = (event, pairIndex) => {\n    setExpanded({\n      ...expanded,\n      [pairIndex]: !expanded[pairIndex],\n    });\n  };\n\n  const renderParentRow = (parent, pairIndex) => {\n    let parentRow = (\n      <Tr key={rowIndex}>\n        <Td\n          expand={{\n            rowIndex: pairIndex,\n            isExpanded: expanded[pairIndex],\n            onToggle: handleExpansionToggle,\n          }}\n        />\n        <Td>{parent}</Td>\n      </Tr>\n    );\n\n    rowIndex += 1;\n    return parentRow;\n  };\n\n  const renderChildRow = (child, pairIndex) => {\n    let childRow = (\n      <Tr\n        className={expanded[pairIndex] === true ? 'pf-m-expanded' : null}\n        key={rowIndex}\n        isExpanded={expanded[pairIndex] === true}\n      >\n        <Td />\n        <Td>{child}</Td>\n      </Tr>\n    );\n\n    rowIndex += 1;\n    return childRow;\n  };\n\n  const renderRows = () => {\n    if (isReportJson) {\n      return rowPairs.map((row, pairIndex) => {\n        return (\n          <React.Fragment key={pairIndex}>\n            {renderParentRow(row.parent, pairIndex)}\n            {renderChildRow(row.child, pairIndex)}\n          </React.Fragment>\n        );\n      });\n    } else\n      return (\n        <CodeBlock\n          style={{\n            [c_code_block__header_BorderBottomColor.name]: global_palette_white,\n            backgroundColor: '#ffffff',\n          }}\n        >\n          <CodeBlockCode>{rowPairs}</CodeBlockCode>\n        </CodeBlock>\n      );\n  };\n\n  return renderRows();\n};\n\nExpandedIssues.propTypes = {\n  isReportJson: propTypes.bool,\n  rowPairs: propTypes.array,\n};\n\nexport default ExpandedIssues;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { TableComposable, Tbody } from '@patternfly/react-table';\nimport { buildResultsRows } from './jobResultsDetailsHelpers';\nimport ExpandedIssues from './ExpandedIssues';\n\nconst JobResultsDetails = ({ item }) => {\n  const isReportJson = item.results.report_json ? true : false;\n\n  const rowPairs = item.results.report_json\n    ? buildResultsRows(item.results.report_json.entries, isReportJson)\n    : buildResultsRows([item.results.report], isReportJson);\n\n  return (\n    <div>\n      <TableComposable\n        variant=\"compact\"\n        style={{\n          marginBottom: '30px',\n          '--pf-c-table__expandable-row--after--border-width--base': '0',\n        }}\n      >\n        <Tbody>\n          <ExpandedIssues rowPairs={rowPairs} isReportJson={isReportJson} />\n        </Tbody>\n      </TableComposable>\n    </div>\n  );\n};\n\nJobResultsDetails.propTypes = {\n  item: propTypes.object,\n};\n\nexport default JobResultsDetails;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Card,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { statusFilters, systemFilter } from './Filters';\nimport {\n  COMPLETED_INFO_PANEL,\n  COMPLETED_INFO_PANEL_FLEX_PROPS,\n  COMPLETED_INFO_BUTTONS,\n  COMPLETED_INFO_BUTTONS_FLEX_PROPS,\n  LOADING_INFO_PANEL,\n  LOADING_JOBS_TABLE,\n  TASK_ERROR,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport BreadcrumbLinkItem from '../../PresentationalComponents/BreadcrumbLinkItem/BreadcrumbLinkItem';\nimport {\n  getSelectedSystems,\n  fetchTask,\n  fetchTaskJobs,\n  hasDetails,\n} from '../completedTaskDetailsHelpers';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport JobResultsDetails from './JobResultsDetails/JobResultsDetails';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst CompletedTaskDetails = () => {\n  const { id } = useParams();\n  const [completedTaskDetails, setCompletedTaskDetails] =\n    useState(LOADING_INFO_PANEL);\n  const [completedTaskJobs, setCompletedTaskJobs] =\n    useState(LOADING_JOBS_TABLE);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [error, setError] = useState();\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const history = useHistory();\n  const chrome = useChrome();\n  const { hasAccess, isLoading } = usePermissions('inventory', [\n    'inventory:*:*',\n    'inventory:*:read',\n  ]);\n\n  const fetchData = async () => {\n    setTableLoading(true);\n    await setCompletedTaskDetails(LOADING_INFO_PANEL);\n    await setCompletedTaskJobs(LOADING_JOBS_TABLE);\n    const fetchedTaskDetails = await fetchTask(id, setError);\n\n    if (Object.keys(fetchedTaskDetails).length) {\n      const fetchedTaskJobs = await fetchTaskJobs(fetchedTaskDetails, setError);\n\n      if (fetchedTaskJobs.length) {\n        await setCompletedTaskDetails(fetchedTaskDetails);\n        await setCompletedTaskJobs(fetchedTaskJobs);\n      }\n    }\n    setTableLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [id]);\n\n  useEffect(() => {\n    completedTaskDetails &&\n      chrome.updateDocumentTitle(\n        `${completedTaskDetails.task_title} - Tasks | Red Hat Insights`\n      );\n  }, [chrome, completedTaskDetails]);\n\n  useEffect(() => {\n    setSelectedSystems(getSelectedSystems(completedTaskJobs));\n  }, [completedTaskJobs]);\n\n  useEffect(() => {\n    if (isDelete) {\n      history.push('/executed');\n      setIsDelete(false);\n    }\n\n    if (isCancel) {\n      fetchData();\n      setIsCancel(false);\n    }\n  }, [isCancel, isDelete]);\n\n  return (\n    <div>\n      <RunTaskModal\n        description={completedTaskDetails.task_description}\n        error={error}\n        isOpen={runTaskModalOpened}\n        selectedSystems={selectedSystems}\n        setModalOpened={setRunTaskModalOpened}\n        slug={completedTaskDetails.task_slug}\n        title={completedTaskDetails.task_title}\n      />\n      <DeleteCancelTaskModal\n        id={completedTaskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={completedTaskDetails.start_time}\n        status={completedTaskDetails.status}\n        title={completedTaskDetails.task_title}\n      />\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Task cannot be displayed'}\n          text={TASK_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : (\n        <React.Fragment>\n          <PageHeader>\n            <Breadcrumb ouiaId=\"completed-tasks-details-breadcrumb\">\n              <BreadcrumbLinkItem to=\"/executed\">Tasks</BreadcrumbLinkItem>\n              <BreadcrumbItem isActive>\n                {completedTaskDetails.task_title}\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <Flex direction={{ default: 'column', md: 'row' }}>\n              <Flex\n                direction={{ default: 'column' }}\n                flex={{ default: 'flex_1' }}\n              >\n                <FlexItem>\n                  <PageHeaderTitle title={completedTaskDetails.task_title} />\n                </FlexItem>\n                <FlexItem>{completedTaskDetails.task_description}</FlexItem>\n              </Flex>\n              <FlexibleFlex\n                data={completedTaskDetails}\n                flexContents={COMPLETED_INFO_BUTTONS(\n                  completedTaskDetails.task_slug,\n                  setRunTaskModalOpened,\n                  completedTaskDetails.status,\n                  setIsDeleteCancelModalOpened\n                )}\n                flexProps={COMPLETED_INFO_BUTTONS_FLEX_PROPS}\n              />\n            </Flex>\n          </PageHeader>\n          <Main>\n            <Card>\n              <Flex\n                className=\"completed-task-details-info-border\"\n                justifyContent={{ default: 'justifyContentSpaceBetween' }}\n                direction={{ default: 'column', md: 'row' }}\n              >\n                <FlexibleFlex\n                  data={completedTaskDetails}\n                  flexContents={COMPLETED_INFO_PANEL}\n                  flexProps={COMPLETED_INFO_PANEL_FLEX_PROPS}\n                />\n              </Flex>\n            </Card>\n            <br />\n            <Card>\n              {!isLoading && hasAccess ? (\n                <TasksTables\n                  label={`${completedTaskDetails.id}-completed-jobs`}\n                  ouiaId={`${completedTaskDetails.id}-completed-jobs-table`}\n                  columns={columns}\n                  items={completedTaskJobs}\n                  filters={{\n                    filterConfig: [...systemFilter, ...statusFilters],\n                  }}\n                  options={{\n                    ...TASKS_TABLE_DEFAULTS,\n                    exportable: {\n                      ...TASKS_TABLE_DEFAULTS.exportable,\n                      columns: exportableColumns,\n                    },\n                    detailsComponent: completedTaskJobs.some((job) =>\n                      hasDetails(job)\n                    )\n                      ? JobResultsDetails\n                      : undefined,\n                  }}\n                  emptyRows={emptyRows('jobs')}\n                  isStickyHeader\n                  isTableLoading={tableLoading}\n                />\n              ) : (\n                <NotAuthorized serviceName=\"Inventory\" />\n              )}\n            </Card>\n          </Main>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default CompletedTaskDetails;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","SplitMessages","alert","content","Split","SplitItem","style","paddingRight","color","propTypes","SystemNameCell","index","system","display_name","chrome","useChrome","createSystemLink","isBeta","SystemColumn","title","props","sortByProp","renderExport","job","renderFunc","renderColumnComponent","StatusColumn","status","MessageColumn","sortByFunction","results","message","_","_empty","exportableColumns","systemFilter","type","conditionalFilterType","label","filter","jobs","value","toLowerCase","includes","statusFilters","items","RouterLink","href","Link","to","BreadcrumbLinkItem","children","BreadcrumbItem","component","EntryRow","severity","marginRight","EntryRowLabel","icon","text","Label","marginTop","marginBottom","className","EntryDetails","entry","detail","key","summary","createGrid","itemOneContent","itemTwoContent","Grid","hasGutter","GridItem","span","xl2","xl","l","m","sm","remediations","map","remediation","remediationKey","fontFamily","context","buildResultsRows","entries","isReportJson","sortedEntries","rows","sort","a","b","sortBySeverity","parent","child","ExpandedIssues","rowPairs","rowIndex","useState","Object","fromEntries","Boolean","expanded","setExpanded","handleExpansionToggle","event","pairIndex","row","parentRow","Tr","Td","expand","isExpanded","onToggle","renderParentRow","childRow","renderChildRow","CodeBlock","c_code_block__header_BorderBottomColor","global_palette_white","CodeBlockCode","JobResultsDetails","item","report_json","report","TableComposable","variant","Tbody","id","useParams","LOADING_INFO_PANEL","completedTaskDetails","setCompletedTaskDetails","LOADING_JOBS_TABLE","completedTaskJobs","setCompletedTaskJobs","tableLoading","setTableLoading","error","setError","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","isDelete","setIsDelete","isCancel","setIsCancel","history","useHistory","usePermissions","hasAccess","isLoading","fetchData","fetchTask","fetchedTaskDetails","keys","length","fetchTaskJobs","fetchedTaskJobs","useEffect","updateDocumentTitle","task_title","getSelectedSystems","push","RunTaskModal","description","task_description","isOpen","setModalOpened","slug","task_slug","DeleteCancelTaskModal","startTime","start_time","EmptyStateDisplay","ExclamationCircleIcon","TASK_ERROR","response","PageHeader","Breadcrumb","ouiaId","isActive","Flex","direction","default","md","flex","FlexItem","PageHeaderTitle","FlexibleFlex","data","flexContents","COMPLETED_INFO_BUTTONS","flexProps","COMPLETED_INFO_BUTTONS_FLEX_PROPS","Main","Card","justifyContent","COMPLETED_INFO_PANEL","COMPLETED_INFO_PANEL_FLEX_PROPS","TasksTables","columns","filters","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","detailsComponent","some","hasDetails","undefined","emptyRows","isStickyHeader","isTableLoading","NotAuthorized","serviceName"],"sourceRoot":""}