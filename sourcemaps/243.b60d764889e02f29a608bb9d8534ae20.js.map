{"version":3,"file":"js/243.1655839636607.d5c5f69607bcaa4323dd.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/SmartComponents/AvailableTasksTable/AvailableTasksTable.js","webpack:///./src/Utilities/hooks/useTableTools/Components/__tests__/TasksTable.fixtures.js"],"sourcesContent":["import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst renderContentType = (data, item, actionFuncs) => {\n  let returnedContent;\n  let actionFunc = actionFuncs?.find((func) => {\n    if (item.actionFunc === Object.keys(func)[0]) {\n      return func[item.actionFunc];\n    }\n  });\n\n  typeof item.content === 'function'\n    ? (returnedContent = item.content(\n        item.match === 'all' ? data : data[item.match],\n        actionFunc?.[item.actionFunc]\n      ))\n    : (returnedContent = data[item.match]);\n\n  return returnedContent;\n};\n\nconst renderContent = (data, content, actionFuncs) => {\n  return content.map((item, index) => {\n    return (\n      <div key={`${item.match}-${index}`} className={item.classname}>\n        {renderContentType(data, item, actionFuncs)}\n      </div>\n    );\n  });\n};\n\nconst CardBuilder = ({\n  actionFuncs,\n  data,\n  cardClass,\n  cardHeader,\n  cardBody,\n  cardFooter,\n}) => {\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={cardHeader.classname}>\n        {renderContent(data, cardHeader.contents)}\n      </CardTitle>\n      <CardBody className={cardBody.classname}>\n        {renderContent(data, cardBody.contents)}\n      </CardBody>\n      <CardFooter className={cardFooter.classname}>\n        {renderContent(data, cardFooter.contents, actionFuncs)}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  actionFuncs: propTypes.array,\n  data: propTypes.object,\n  cardClass: propTypes.string,\n  cardHeader: propTypes.object,\n  cardBody: propTypes.object,\n  cardFooter: propTypes.object,\n};\n\nexport default CardBuilder;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\n//import { fetchAvailableTasks } from '../../../api';\nimport { availableTasksTableItems } from '../../Utilities/hooks/useTableTools/Components/__tests__/TasksTable.fixtures';\nimport CardBuilder from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  AVAILABLE_TASK_CARD_HEADER,\n  AVAILABLE_TASK_CARD_BODY,\n  AVAILABLE_TASK_CARD_FOOTER,\n} from '../../constants';\n\nconst buildCardFuncArray = (openTaskModal) => {\n  return [{ openTaskModal: openTaskModal }];\n};\n\nconst AvailableTasksTable = ({ openTaskModal }) => {\n  //const [availableTasks, setAvailableTasks] = useState([]);\n  const [availableTasks, setAvailableTasks] = useState(\n    availableTasksTableItems\n  );\n\n  useEffect(() => {\n    const fetchData = () => {\n      //const result = fetchAvailableTasks();\n      const result = availableTasksTableItems;\n\n      setAvailableTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {availableTasks?.map((task) => {\n        return (\n          <React.Fragment key={task.title}>\n            <CardBuilder\n              data={task}\n              cardHeader={AVAILABLE_TASK_CARD_HEADER}\n              cardBody={AVAILABLE_TASK_CARD_BODY}\n              cardFooter={AVAILABLE_TASK_CARD_FOOTER}\n              actionFuncs={buildCardFuncArray(openTaskModal)}\n            />\n            <br />\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","export const completedTasksTableItems = [\n  {\n    title: 'taskA',\n    id: 1,\n    start: '2022-04-21T10:10:00',\n    end: 'null',\n    run_date_time: 'Running',\n    initiated_by: 'Michael',\n    status: 'running',\n    system_count: 10,\n  },\n  {\n    title: 'taskB',\n    id: 2,\n    start: '2022-04-20T10:10:00',\n    end: '2022-04-20T11:10:00',\n    run_date_time: '20 Apr 2022, 11:10 UTC',\n    initiated_by: 'Michael',\n    status: 'complete',\n    system_count: 5,\n  },\n];\n\nexport const availableTasksTableItems = [\n  {\n    title: 'taskA',\n    slug: 'taska',\n    description:\n      'Uses the insights-client to determine if systems are affected by the LogShell vulnerability. Resource intensive scan',\n    published_date: '2022-01-01T13:45',\n    severity: 'critical',\n  },\n  {\n    title: 'taskB',\n    slug: 'taskb',\n    description:\n      'Uses the insights-client to determine if RHEL version can be upgraded with LEAP tool. Resource intensive scan',\n    published_date: '2021-10-13T00:00',\n    severity: 'moderate',\n  },\n];\n\nexport const completedTaskJobsItems = [\n  {\n    id: 82,\n    display_name: 'host01.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeeff',\n    message: 'Vulnerability found.',\n    status: 'completed',\n  },\n  {\n    id: 83,\n    display_name: 'host02.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeefg',\n    message: 'No vulnerability found.',\n    status: 'completed',\n  },\n  {\n    id: 84,\n    display_name: 'host03.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeefh',\n    message: 'No vulnerability found.',\n    status: 'completed',\n  },\n  {\n    id: 85,\n    display_name: 'host04.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeefi',\n    message: 'Vulnerability found.',\n    status: 'completed',\n  },\n  {\n    id: 86,\n    display_name: 'host05.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeefj',\n    message: 'Vulnerability found.',\n    status: 'completed',\n  },\n  {\n    id: 87,\n    display_name: 'host06.example.com',\n    host_id: '00112233-4455-6677-8899aabbccddeefk',\n    message: 'No vulnerability found.',\n    status: 'completed',\n  },\n];\n"],"names":["renderContent","data","content","actionFuncs","map","item","index","key","match","className","classname","actionFunc","find","func","Object","keys","renderContentType","CardBuilder","cardClass","cardHeader","cardBody","cardFooter","Card","CardTitle","contents","CardBody","CardFooter","propTypes","buildCardFuncArray","openTaskModal","AvailableTasksTable","useState","availableTasksTableItems","availableTasks","setAvailableTasks","useEffect","result","task","title","AVAILABLE_TASK_CARD_HEADER","AVAILABLE_TASK_CARD_BODY","AVAILABLE_TASK_CARD_FOOTER","completedTasksTableItems","id","start","end","run_date_time","initiated_by","status","system_count","slug","description","published_date","severity","completedTaskJobsItems","display_name","host_id","message"],"sourceRoot":""}