{"version":3,"file":"js/TasksPage.1657566309683.88bf11b28c83ebc4378c.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/SmartComponents/SystemTable/constants.js","webpack:///./src/SmartComponents/SystemTable/helpers.js","webpack:///./src/SmartComponents/SystemTable/hooks.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/SystemTable/SystemTable.js","webpack:///./src/PresentationalComponents/ExecuteTaskButton/ExecuteTaskButton.js","webpack:///./src/SmartComponents/RunTaskModal/RunTaskModal.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/PresentationalComponents/RunTaskButton/RunTaskButton.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/CompletedTasksTable/Columns.js","webpack:///./src/SmartComponents/CompletedTasksTable/Filters.js","webpack:///./src/SmartComponents/CompletedTasksTable/CompletedTasksTable.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import { entitiesReducer } from '../../store/index';\n\nexport const systemColumns = [\n  {\n    key: 'display_name',\n    sortKey: 'display_name',\n    props: { width: 20 },\n    title: 'Name',\n  },\n  'tags',\n  {\n    key: 'os_version',\n    sortKey: 'os_version',\n    props: { width: 10 },\n    title: 'OS',\n  },\n  'updated',\n];\n\nexport const defaultOnLoad = (columns, getRegistry) => {\n  return ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns), {\n        page: 1,\n        perPage: 10,\n        sortBy: {\n          key: 'last_updated',\n          direction: 'desc',\n        },\n      }),\n    });\n};\n","const buildSortString = (orderBy, orderDirection) => {\n  let sortString = orderBy ? '&sort=' : '';\n  let direction = '';\n  if (orderDirection === 'DESC') {\n    direction = '-';\n  }\n  let order = orderBy === 'updated' ? 'last_seen' : orderBy;\n\n  return `${sortString}${direction}${order}`;\n};\n\nconst buildFilterString = (filters) => {\n  let displayNameFilter = filters.hostnameOrId\n    ? `&display_name=${filters.hostnameOrId}`\n    : '';\n\n  return `${displayNameFilter}`;\n};\n\nexport const buildFilterSortString = (\n  limit,\n  offset,\n  orderBy,\n  orderDirection,\n  filters\n) => {\n  let limitOffsetString = `limit=${limit}&offset=${offset}`;\n  let sortString = buildSortString(orderBy, orderDirection);\n  let filterString = buildFilterString(filters);\n  return `?${limitOffsetString}${sortString}${filterString}`;\n};\n","import { fetchSystems } from '../../../api';\nimport { buildFilterSortString } from './helpers';\n\nexport const useGetEntities = (selectedIds) => {\n  return async (\n    _items,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const limit = perPage;\n    const offset = page * perPage - perPage;\n    const filterSortString = buildFilterSortString(\n      limit,\n      offset,\n      orderBy,\n      orderDirection,\n      filters\n    );\n    const fetchedEntities = await fetchSystems(filterSortString);\n\n    const {\n      data,\n      meta: { count },\n    } = fetchedEntities || {};\n\n    return {\n      results: data.map((entity) => ({\n        ...entity,\n        selected: (selectedIds || []).map((id) => id).includes(entity.id),\n      })),\n      page,\n      perPage,\n      orderBy,\n      orderDirection,\n      total: count,\n    };\n  };\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Unable to load inventory component\"),\n        React.createElement(\"h2\", null,\n            \"Failed to load \",\n            component),\n        React.createElement(\"code\", null, \"More info can be found in browser console output.\")));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useContext, useEffect, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport { defaultOnLoad, systemColumns } from './constants';\nimport { useGetEntities } from './hooks';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Spinner } from '@patternfly/react-core';\nimport { RegistryContext } from '../../store';\nimport { useDispatch } from 'react-redux';\n\nconst SystemTable = ({ selectedIds, selectIds }) => {\n  const inventory = useRef(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: 'INVENTORY_INIT' });\n    dispatch({ type: 'RESET_PAGE' });\n    inventory?.current?.onRefreshData();\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITY',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n  }, [selectedIds]);\n\n  const mergedColumns = (defaultColumns) =>\n    systemColumns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <InventoryTable\n      isFullView\n      autoRefresh\n      initialLoading\n      //showTags\n      hideFilters={{\n        all: true,\n        //name: false,\n        //tags: false,\n        //operatingSystem: false,\n      }}\n      columns={mergedColumns}\n      ref={inventory}\n      fallback={<Spinner />}\n      onLoad={defaultOnLoad(systemColumns, getRegistry)}\n      getEntities={useGetEntities(selectedIds)}\n      tableProps={{\n        canSelectAll: false,\n        isStickyHeader: true,\n        onSelect: selectIds,\n      }}\n    />\n  );\n};\n\nSystemTable.propTypes = {\n  selectedIds: propTypes.array,\n  selectIds: propTypes.func,\n};\n\nexport default SystemTable;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { executeTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\nimport { EXECUTE_TASK_NOTIFICATION } from '../../constants';\n\nconst ExecuteTaskButton = ({\n  classname,\n  ids,\n  setModalOpened,\n  slug,\n  title,\n  variant,\n}) => {\n  const buildApiBody = () => {\n    return {\n      task: slug,\n      hosts: ids,\n    };\n  };\n\n  const submitTask = async () => {\n    setModalOpened(false);\n\n    let result = await executeTask(buildApiBody());\n    if (result?.response?.status && result?.response?.status !== 200) {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n      });\n    } else {\n      EXECUTE_TASK_NOTIFICATION(title, ids, result.data.id);\n    }\n  };\n\n  return (\n    <Button\n      aria-label={`${slug}-submit-task-button`}\n      className={classname}\n      variant={variant}\n      onClick={() => submitTask()}\n    >\n      Execute task\n    </Button>\n  );\n};\n\nExecuteTaskButton.propTypes = {\n  classname: propTypes.string,\n  ids: propTypes.array,\n  setModalOpened: propTypes.func,\n  slug: propTypes.string,\n  title: propTypes.string,\n  variant: propTypes.string,\n};\n\nexport default ExecuteTaskButton;\n","import React, { useEffect, useState } from 'react';\nimport { Flex, FlexItem, Modal } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport SystemTable from '../SystemTable/SystemTable';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  TASKS_API_ROOT,\n  TASK_ERROR,\n} from '../../constants';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport ExecuteTaskButton from '../../PresentationalComponents/ExecuteTaskButton/ExecuteTaskButton';\n\nconst RunTaskModal = ({ error, task, isOpen, setModalOpened }) => {\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  useEffect(() => {\n    setSelectedIds([]);\n  }, [task]);\n\n  const selectIds = (_event, _isSelected, _index, entity) => {\n    let newSelectedIds = [...selectedIds];\n\n    !newSelectedIds.includes(entity.id)\n      ? newSelectedIds.push(entity.id)\n      : newSelectedIds.splice(newSelectedIds.indexOf(entity.id), 1);\n\n    setSelectedIds(newSelectedIds);\n  };\n\n  return (\n    <Modal\n      aria-label=\"run-task-modal\"\n      title={task.title || 'Error'}\n      isOpen={isOpen}\n      onClose={() => setModalOpened(false)}\n      width={'70%'}\n    >\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'This task cannot be displayed'}\n          text={TASK_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : (\n        <React.Fragment>\n          <Flex>\n            <FlexItem>\n              <b>Task description</b>\n            </FlexItem>\n          </Flex>\n          <Flex style={{ paddingBottom: '8px' }}>\n            <FlexItem>{task.description}</FlexItem>\n          </Flex>\n          <Flex>\n            <FlexItem>\n              <a\n                href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n              >\n                Download preview of playbook\n              </a>\n            </FlexItem>\n          </Flex>\n          <br />\n          <b>Systems to run tasks on</b>\n          <SystemTable selectedIds={selectedIds} selectIds={selectIds} />\n          <ExecuteTaskButton\n            ids={selectedIds}\n            setModalOpened={setModalOpened}\n            slug={task.slug}\n            title={task.title}\n            variant=\"primary\"\n          />\n        </React.Fragment>\n      )}\n    </Modal>\n  );\n};\n\nRunTaskModal.propTypes = {\n  error: propTypes.object,\n  isOpen: propTypes.bool,\n  setModalOpened: propTypes.func,\n  task: propTypes.object,\n};\n\nexport default RunTaskModal;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst RunTaskButton = ({\n  classname,\n  isFirst,\n  openTaskModal,\n  slug,\n  variant,\n}) => {\n  return (\n    <Button\n      aria-label={`${slug}-run-task-button`}\n      className={classname}\n      variant={variant}\n      onClick={() => openTaskModal(slug)}\n    >\n      {isFirst ? 'Run task' : 'Run task again'}\n    </Button>\n  );\n};\n\nRunTaskButton.propTypes = {\n  classname: propTypes.string,\n  isFirst: propTypes.bool,\n  openTaskModal: propTypes.func,\n  slug: propTypes.string,\n  variant: propTypes.string,\n};\n\nexport default RunTaskButton;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_API_ROOT,\n  TASKS_ERROR,\n} from '../../constants';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks?.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          return (\n            <React.Fragment aria-label={task.title} key={task.title}>\n              <CardBuilder>\n                <CardBuilderContent content={task.title} type=\"title\" />\n                <CardBuilderContent\n                  className=\"card-task-description\"\n                  content={task.description}\n                  type=\"body\"\n                />\n                <CardBuilderContent\n                  content={\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <a\n                          href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n                        >\n                          Download preview of playbook\n                        </a>\n                      </FlexItem>\n                      <FlexItem>\n                        <RunTaskButton\n                          slug={task.slug}\n                          isFirst\n                          variant=\"primary\"\n                          openTaskModal={openTaskModal}\n                        />\n                      </FlexItem>\n                    </Flex>\n                  }\n                  type=\"footer\"\n                />\n              </CardBuilder>\n              <br />\n            </React.Fragment>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const setTasks = (result) => {\n    if (result?.response?.status && result?.response?.status !== 200) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n      });\n    } else {\n      setAvailableTasks(result.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  renderColumnComponent,\n  renderRunDateTime,\n} from '../../Utilities/helpers';\n\nconst TaskNameCell = ({ id, task_title }, index) => (\n  <Link key={`task-title-${index}`} to={`/executed/${id}`}>\n    {task_title}\n  </Link>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  title: propTypes.string,\n  task_title: propTypes.string,\n  index: propTypes.number,\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'task_title',\n  renderExport: (task) => task.task_title,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'systems_count',\n  renderExport: (task) => task.system_count,\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'run_date_time',\n  renderExport: (task) => renderRunDateTime(task.run_date_time),\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  RunDateTimeColumn,\n];\n\nexport default [TaskColumn, SystemsCountColumn, RunDateTimeColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = {\n  type: conditionalFilterType.text,\n  label: 'Task',\n  filter: (tasks, value) =>\n    tasks.filter((task) =>\n      task.task_title.toLowerCase().includes(value.toLowerCase())\n    ),\n};\n","import React, { useState, useEffect } from 'react';\nimport { ExclamationCircleIcon, WrenchIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { fetchExecutedTasks } from '../../../api';\nimport * as Filters from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport {\n  COMPLETED_TASKS_ERROR,\n  EMPTY_COMPLETED_TASKS_MESSAGE,\n  EMPTY_COMPLETED_TASKS_TITLE,\n  LOADING_COMPLETED_TASKS_TABLE,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\n\nconst CompletedTasksTable = () => {\n  const filters = Object.values(Filters);\n  const [completedTasks, setCompletedTasks] = useState(\n    LOADING_COMPLETED_TASKS_TABLE\n  );\n  const [error, setError] = useState();\n\n  const setTasks = async (result) => {\n    if (result?.response?.status && result?.response?.status !== 200) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n      });\n    } else {\n      result.data.map(\n        (task) => (task.run_date_time = renderRunDateTime(task.end))\n      );\n\n      await setCompletedTasks(result.data);\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await fetchExecutedTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"completed-tasks\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Completed tasks cannot be displayed'}\n          text={COMPLETED_TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : completedTasks.length === 0 ? (\n        <EmptyStateDisplay\n          icon={WrenchIcon}\n          color=\"#6a6e73\"\n          title={EMPTY_COMPLETED_TASKS_TITLE}\n          text={EMPTY_COMPLETED_TASKS_MESSAGE}\n        />\n      ) : (\n        <TasksTables\n          ouiaId=\"completed-tasks-table\"\n          columns={columns}\n          items={completedTasks}\n          filters={{\n            filterConfig: filters,\n          }}\n          options={{\n            ...TASKS_TABLE_DEFAULTS,\n            exportable: {\n              ...TASKS_TABLE_DEFAULTS.exportable,\n              columns: exportableColumns,\n            },\n          }}\n          emptyRows={emptyRows('tasks')}\n          isStickyHeader\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CompletedTasksTable;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport CompletedTasksTable from '../../SmartComponents/CompletedTasksTable/CompletedTasksTable';\nimport { fetchAvailableTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nimport './tasks-page.scss';\n\nconst TasksPage = ({ tab }) => {\n  const history = useHistory();\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    if (tab === 0) {\n      history.push('available');\n    }\n  }, []);\n\n  const updateTab = (event, index) => {\n    history.push(index ? 'executed' : 'available');\n    setTab(index);\n  };\n\n  const openTaskModal = async (slug) => {\n    const task = await fetchAvailableTask(slug);\n    if (task?.response?.status && task?.response?.status !== 200) {\n      setError(task);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: task.message,\n        dismissable: true,\n      });\n    } else {\n      setActiveTask(task);\n    }\n\n    setRunTaskModalOpened(true);\n  };\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        error={error}\n        task={activeTask}\n        isOpen={runTaskModalOpened}\n        setModalOpened={setRunTaskModalOpened}\n      />\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <Main>\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <CompletedTasksTable />\n            )}\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","systemColumns","sortKey","props","defaultOnLoad","columns","getRegistry","INVENTORY_ACTION_TYPES","mergeWithEntities","register","entitiesReducer","page","perPage","sortBy","direction","buildFilterSortString","limit","offset","orderBy","orderDirection","filters","limitOffsetString","sortString","order","buildSortString","filterString","displayNameFilter","hostnameOrId","buildFilterString","useGetEntities","selectedIds","_items","per_page","filterSortString","fetchSystems","fetchedEntities","data","count","meta","results","entity","selected","includes","total","_a","component","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","__assign","assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","useStore","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","InvTable","defaultProps","Bullseye","Spinner","size","SystemTable","selectIds","inventory","useRef","useContext","RegistryContext","dispatch","useDispatch","type","current","onRefreshData","payload","InventoryTable","isFullView","autoRefresh","initialLoading","hideFilters","all","defaultColumns","column","isStringCol","defaultColumn","find","defaultCol","onLoad","getEntities","tableProps","canSelectAll","isStickyHeader","ExecuteTaskButton","classname","ids","setModalOpened","slug","variant","submitTask","executeTask","task","hosts","result","response","status","dispatchNotification","description","message","dismissable","EXECUTE_TASK_NOTIFICATION","Button","onClick","RunTaskModal","isOpen","useState","setSelectedIds","Modal","onClose","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASK_ERROR","Flex","FlexItem","style","paddingBottom","href","TASKS_API_ROOT","AVAILABLE_TASKS_ROOT","_event","_isSelected","_index","newSelectedIds","splice","push","CardBuilderContent","content","findChild","children","child","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","RunTaskButton","isFirst","openTaskModal","AvailableTasksTable","availableTasks","TASKS_ERROR","default","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","SkeletonSize","AvailableTasks","setAvailableTasks","isLoading","setIsLoading","setError","setTasks","fetchData","fetchAvailableTasks","TaskNameCell","task_title","Link","to","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","system_count","RunDateTimeColumn","renderRunDateTime","run_date_time","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","toLowerCase","values","Filters","LOADING_COMPLETED_TASKS_TABLE","completedTasks","setCompletedTasks","end","fetchExecutedTasks","COMPLETED_TASKS_ERROR","WrenchIcon","EMPTY_COMPLETED_TASKS_TITLE","EMPTY_COMPLETED_TASKS_MESSAGE","TasksTables","ouiaId","items","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","emptyRows","TasksPage","tab","setTab","runTaskModalOpened","setRunTaskModalOpened","activeTask","setActiveTask","fetchAvailableTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Main","Stack","hasGutter","StackItem"],"sourceRoot":""}