{"version":3,"file":"js/TasksPage.068e5701f946b5c022bd.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/in-progress-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/ActivityTable/Columns.js","webpack:///./src/SmartComponents/ActivityTable/Filters.js","webpack:///./src/SmartComponents/ActivityTable/ActivityTable.js","webpack:///./src/SmartComponents/ActivityTable/hooks/useActionResolvers.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.InProgressIconConfig = {\n  name: 'InProgressIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InProgressIcon = require('../createIcon').createIcon(exports.InProgressIconConfig);\nexports[\"default\"] = exports.InProgressIcon;","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_API_ROOT,\n  TASKS_ERROR,\n} from '../../constants';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  const chrome = useChrome();\n\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks?.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          if (\n            chrome.isBeta() ||\n            (!chrome.isBeta() &&\n              task.slug !== 'convert-to-rhel-preanalysis-stage' &&\n              task.slug !== 'convert-to-rhel-preanalysis')\n          ) {\n            return (\n              <div aria-label={task.title} key={task.title}>\n                <CardBuilder>\n                  <CardBuilderContent content={task.title} type=\"title\" />\n                  <CardBuilderContent\n                    className=\"card-task-description\"\n                    content={task.description}\n                    type=\"body\"\n                  />\n                  <CardBuilderContent\n                    content={\n                      <Flex direction={{ default: 'column' }}>\n                        <FlexItem>\n                          <a\n                            href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n                          >\n                            Download preview of playbook\n                          </a>\n                        </FlexItem>\n                        <FlexItem>\n                          <RunTaskButton\n                            slug={task.slug}\n                            isFirst\n                            variant=\"primary\"\n                            openTaskModal={openTaskModal}\n                          />\n                        </FlexItem>\n                      </Flex>\n                    }\n                    type=\"footer\"\n                  />\n                </CardBuilder>\n                <br />\n              </div>\n            );\n          }\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\nimport { isError } from '../completedTaskDetailsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const chrome = useChrome();\n\n  const setTasks = (result) => {\n    if (isError(result)) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setAvailableTasks(result.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    chrome.updateDocumentTitle('Tasks | Red Hat Insights');\n  }, [chrome]);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { renderColumnComponent } from '../../Utilities/helpers';\nimport { CheckCircleIcon, InProgressIcon } from '@patternfly/react-icons';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst TaskNameCell = ({ id, task_title }, index) => (\n  <InsightsLink key={`task-title-${index}`} to={`/executed/${id}`}>\n    {task_title}\n  </InsightsLink>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  task_title: propTypes.any,\n  index: propTypes.number,\n};\n\nconst StatusCell = ({ status }) =>\n  ({\n    Completed: (\n      <span style={{ color: '#3E8635', display: 'flex', alignItems: 'center' }}>\n        <CheckCircleIcon color=\"#3E8635\" style={{ marginRight: '4px' }} />\n        {status}\n      </span>\n    ),\n    Running: (\n      <span style={{ color: '#2B9AF3', display: 'flex', alignItems: 'center' }}>\n        <InProgressIcon color=\"#2B9AF3\" style={{ marginRight: '4px' }} />\n        {status}\n      </span>\n    ),\n  }[status] || status);\n\nStatusCell.propTypes = {\n  status: propTypes.oneOfType([propTypes.string, propTypes.object]),\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 25,\n  },\n  sortByProp: 'task_title',\n  renderExport: (task) => task.task_title,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 10,\n  },\n  sortByProp: 'systems_count',\n  renderExport: (task) => task.systems_count,\n};\n\nexport const StatusColumn = {\n  title: 'Status',\n  props: {\n    width: 10,\n  },\n  sortByProp: 'status',\n  renderExport: (task) => task.status,\n  renderFunc: renderColumnComponent(StatusCell),\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'end_time',\n  renderExport: (task) => task.run_date_time,\n  renderFunc: (_, _empty, result) => result.run_date_time,\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  StatusColumn,\n  RunDateTimeColumn,\n];\n\nexport default [\n  TaskColumn,\n  SystemsCountColumn,\n  StatusColumn,\n  RunDateTimeColumn,\n];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = [\n  {\n    type: conditionalFilterType.text,\n    label: 'Task',\n    filter: (tasks, value) =>\n      tasks.filter((task) =>\n        task.task_title.toLowerCase().includes(value.toLowerCase())\n      ),\n  },\n];\n\nexport const statusFilter = [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'Status',\n    filter: (tasks, value) =>\n      tasks.filter((task) => value.includes(task.status.toLowerCase())),\n    items: [\n      { label: 'Completed', value: 'completed' },\n      { label: 'Running', value: 'running' },\n    ],\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { ExclamationCircleIcon, WrenchIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { nameFilter, statusFilter } from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport {\n  COMPLETED_TASKS_ERROR,\n  COMPLETED_TASKS_TABLE_DEFAULTS,\n  EMPTY_COMPLETED_TASKS_MESSAGE,\n  EMPTY_COMPLETED_TASKS_TITLE,\n  LOADING_ACTIVITIES_TABLE,\n  TASK_LOADING_CONTENT,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport { fetchExecutedTasks } from '../../../api';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport useActionResolver from './hooks/useActionResolvers';\nimport {\n  createNotification,\n  fetchTask,\n  fetchTaskJobs,\n  getSelectedSystems,\n  isError,\n} from '../completedTaskDetailsHelpers';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\n\nconst ActivityTable = () => {\n  const [activities, setActivities] = useState(LOADING_ACTIVITIES_TABLE);\n  const [activityDetails, setActivityDetails] = useState(TASK_LOADING_CONTENT);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [error, setError] = useState();\n  const [taskError, setTaskError] = useState();\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const [isRunTaskAgain, setIsRunTaskAgain] = useState(false);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [taskDetails, setTaskDetails] = useState({});\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n\n  const fetchTaskDetails = async (id) => {\n    setTaskError();\n    setRunTaskModalOpened(true);\n    const fetchedTaskDetails = await fetchTask(id, setTaskError);\n\n    if (Object.keys(fetchedTaskDetails).length > 0) {\n      const fetchedTaskJobs = await fetchTaskJobs(\n        fetchedTaskDetails,\n        setTaskError\n      );\n\n      setSelectedSystems(getSelectedSystems(fetchedTaskJobs));\n      await setActivityDetails(fetchedTaskDetails);\n    } else {\n      setRunTaskModalOpened(false);\n      await setActivityDetails({});\n    }\n  };\n\n  const fetchData = async () => {\n    const path = `?limit=500&offset=0`;\n    const result = await fetchExecutedTasks(path);\n\n    setTasks(result);\n  };\n\n  const handleCancelOrDeleteTask = async (task) => {\n    await setTaskDetails(task);\n    setIsDeleteCancelModalOpened(true);\n  };\n\n  const actionResolver = useActionResolver(\n    handleCancelOrDeleteTask,\n    fetchTaskDetails\n  );\n\n  const setTasks = async (result) => {\n    if (isError(result)) {\n      createNotification(result);\n      setError(result);\n    } else {\n      result?.data?.map((task) =>\n        task.status === 'Completed'\n          ? (task.run_date_time = renderRunDateTime(task.end_time))\n          : (task.run_date_time = task.status)\n      );\n\n      await setActivities(result.data);\n      setTableLoading(false);\n    }\n  };\n\n  const refetchData = async () => {\n    setTableLoading(true);\n    await setActivities(LOADING_ACTIVITIES_TABLE);\n    fetchData();\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (isDelete || isCancel) {\n      refetchData();\n      setIsDelete(false);\n      setIsCancel(false);\n    } else if (isRunTaskAgain) {\n      refetchData();\n      setIsRunTaskAgain(false);\n    }\n  }, [isCancel, isDelete, isRunTaskAgain]);\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        description={activityDetails.task_description}\n        error={taskError}\n        isOpen={runTaskModalOpened}\n        selectedSystems={selectedSystems}\n        setIsRunTaskAgain={setIsRunTaskAgain}\n        setModalOpened={setRunTaskModalOpened}\n        slug={activityDetails.task_slug}\n        title={activityDetails.task_title}\n      />\n      <DeleteCancelTaskModal\n        id={taskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={taskDetails.start_time}\n        status={taskDetails.status}\n        title={taskDetails.task_title}\n      />\n      <div aria-label=\"activity\">\n        {error ? (\n          <EmptyStateDisplay\n            icon={ExclamationCircleIcon}\n            color=\"#c9190b\"\n            title={'Activities cannot be displayed'}\n            text={COMPLETED_TASKS_ERROR}\n            error={`Error ${error?.response?.status}: ${error?.message}`}\n          />\n        ) : activities?.length === 0 ? (\n          <EmptyStateDisplay\n            icon={WrenchIcon}\n            color=\"#6a6e73\"\n            title={EMPTY_COMPLETED_TASKS_TITLE}\n            text={EMPTY_COMPLETED_TASKS_MESSAGE}\n          />\n        ) : (\n          <TasksTables\n            label=\"activity-table\"\n            ouiaId=\"activity-table\"\n            columns={columns}\n            items={activities}\n            filters={{\n              filterConfig: [...nameFilter, ...statusFilter],\n            }}\n            options={{\n              ...TASKS_TABLE_DEFAULTS,\n              ...COMPLETED_TASKS_TABLE_DEFAULTS,\n              actionResolver,\n              exportable: {\n                ...TASKS_TABLE_DEFAULTS.exportable,\n                columns: exportableColumns,\n              },\n            }}\n            emptyRows={emptyRows('tasks')}\n            isStickyHeader\n            isTableLoading={tableLoading}\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ActivityTable;\n","const useActionResolver = (handleTask, fetchTaskDetails) => {\n  const onClick = (funcCall, task) => {\n    funcCall(task);\n  };\n\n  return (row) => [\n    {\n      title: 'Run this task again',\n      onClick: (_event, _index, task) =>\n        onClick(fetchTaskDetails, task.task.title.props.id),\n    },\n    {\n      title: 'Delete',\n      isDisabled: row.task.title.props.status !== 'Completed',\n      /*row.task.title.props.status === 'Completed' ||\n        row.task.title.props.status === 'Cancelled'\n          ? 'Delete'\n          : 'Cancel',*/\n      onClick: (_event, _index, task) => {\n        onClick(handleTask, task.task.title.props);\n      },\n    },\n  ];\n};\n\nexport default useActionResolver;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport ActivityTable from '../../SmartComponents/ActivityTable/ActivityTable';\nimport { fetchAvailableTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nimport './tasks-page.scss';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nconst TasksPage = ({ tab }) => {\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    setTab(tab);\n    setRunTaskModalOpened(false);\n  }, [tab]);\n\n  const navigate = useInsightsNavigate();\n\n  const updateTab = (event, index) => {\n    navigate(index ? '/executed' : '/available');\n  };\n\n  const openTaskModal = async (value, slug) => {\n    const task = await fetchAvailableTask(slug);\n    if (task?.response?.status && task?.response?.status !== 200) {\n      setError(task);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: task.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setActiveTask(task);\n    }\n\n    setRunTaskModalOpened(value);\n  };\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        description={activeTask.description}\n        error={error}\n        isOpen={runTaskModalOpened}\n        selectedSystems={[]}\n        setModalOpened={setRunTaskModalOpened}\n        slug={activeTask.slug}\n        title={activeTask.title}\n      />\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <ActivityTable openTaskModal={openTaskModal} />\n            )}\n          </StackItem>\n        </Stack>\n      </section>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","CardBuilderContent","content","findChild","children","component","find","child","props","type","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","AvailableTasksTable","availableTasks","error","openTaskModal","chrome","useChrome","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASKS_ERROR","response","status","message","length","task","isBeta","slug","description","Flex","direction","default","FlexItem","href","TASKS_API_ROOT","AVAILABLE_TASKS_ROOT","RunTaskButton","isFirst","variant","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","size","SkeletonSize","AvailableTasks","useState","setAvailableTasks","isLoading","setIsLoading","setError","setTasks","result","isError","dispatchNotification","dismissable","autoDismiss","data","useEffect","fetchData","fetchAvailableTasks","updateDocumentTitle","TaskNameCell","task_title","InsightsLink","to","StatusCell","Completed","style","display","alignItems","marginRight","Running","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","systems_count","StatusColumn","RunDateTimeColumn","run_date_time","_","_empty","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","toLowerCase","includes","statusFilter","items","LOADING_ACTIVITIES_TABLE","activities","setActivities","TASK_LOADING_CONTENT","activityDetails","setActivityDetails","tableLoading","setTableLoading","taskError","setTaskError","isDelete","setIsDelete","isCancel","setIsCancel","isRunTaskAgain","setIsRunTaskAgain","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","taskDetails","setTaskDetails","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","fetchTaskDetails","fetchTask","fetchedTaskDetails","Object","keys","fetchTaskJobs","fetchedTaskJobs","getSelectedSystems","fetchExecutedTasks","handleCancelOrDeleteTask","actionResolver","handleTask","onClick","funcCall","row","_event","_index","isDisabled","useActionResolver","createNotification","renderRunDateTime","end_time","refetchData","RunTaskModal","task_description","isOpen","setModalOpened","task_slug","DeleteCancelTaskModal","startTime","start_time","COMPLETED_TASKS_ERROR","WrenchIcon","EMPTY_COMPLETED_TASKS_TITLE","EMPTY_COMPLETED_TASKS_MESSAGE","TasksTables","ouiaId","columns","filters","filterConfig","options","TASKS_TABLE_DEFAULTS","COMPLETED_TASKS_TABLE_DEFAULTS","exportable","emptyRows","isStickyHeader","isTableLoading","TasksPage","tab","setTab","activeTask","setActiveTask","navigate","useInsightsNavigate","fetchAvailableTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Stack","hasGutter","StackItem"],"sourceRoot":""}