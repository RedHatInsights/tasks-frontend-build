{"version":3,"file":"js/TasksPage.37237d79f1f79fe0bfb4.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/in-progress-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/ActivityTable/Columns.js","webpack:///./src/SmartComponents/ActivityTable/Filters.js","webpack:///./node_modules/p-all/node_modules/clean-stack/index.js","webpack:///./node_modules/p-all/node_modules/aggregate-error/index.js","webpack:///./node_modules/p-all/node_modules/escape-string-regexp/index.js","webpack:///./node_modules/p-all/node_modules/indent-string/index.js","webpack:///./node_modules/p-all/node_modules/p-map/index.js","webpack:///./node_modules/p-all/index.js","webpack:///./src/SmartComponents/ActivityTable/ActivityTable.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/SmartComponents/ActivityTable/hooks/useActionResolvers.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.InProgressIconConfig = {\n  name: 'InProgressIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.InProgressIcon = require('../createIcon').createIcon(exports.InProgressIconConfig);\nexports[\"default\"] = exports.InProgressIcon;","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_API_ROOT,\n  TASKS_ERROR,\n} from '../../constants';\nimport ReactMarkdown from 'react-markdown';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks?.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          return (\n            <div aria-label={task.title} key={task.title}>\n              <CardBuilder>\n                <CardBuilderContent content={task.title} type=\"title\" />\n                <CardBuilderContent\n                  className=\"card-task-description\"\n                  content={<ReactMarkdown>{task.description}</ReactMarkdown>}\n                  type=\"body\"\n                />\n                <CardBuilderContent\n                  content={\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <a\n                          href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n                        >\n                          Download preview of playbook\n                        </a>\n                      </FlexItem>\n                      <FlexItem>\n                        <RunTaskButton\n                          slug={task.slug}\n                          isFirst\n                          variant=\"primary\"\n                          openTaskModal={openTaskModal}\n                        />\n                      </FlexItem>\n                    </Flex>\n                  }\n                  type=\"footer\"\n                />\n              </CardBuilder>\n              <br />\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\nimport { isError } from '../completedTaskDetailsHelpers';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const chrome = useChrome();\n\n  const setTasks = (result) => {\n    if (isError(result)) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setAvailableTasks(result.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    chrome.updateDocumentTitle('Tasks | Red Hat Insights');\n  }, [chrome]);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { renderColumnComponent } from '../../Utilities/helpers';\nimport { CheckCircleIcon, InProgressIcon } from '@patternfly/react-icons';\nimport InsightsLink from '@redhat-cloud-services/frontend-components/InsightsLink';\n\nconst TaskNameCell = ({ id, name }, index) => (\n  <InsightsLink key={`task-name-${index}`} to={`/executed/${id}`}>\n    {name}\n  </InsightsLink>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  name: propTypes.any,\n  index: propTypes.number,\n};\n\nconst StatusCell = ({ status }) =>\n  ({\n    Completed: (\n      <span style={{ color: '#3E8635', display: 'flex', alignItems: 'center' }}>\n        <CheckCircleIcon color=\"#3E8635\" style={{ marginRight: '4px' }} />\n        {status}\n      </span>\n    ),\n    Running: (\n      <span style={{ color: '#2B9AF3', display: 'flex', alignItems: 'center' }}>\n        <InProgressIcon color=\"#2B9AF3\" style={{ marginRight: '4px' }} />\n        {status}\n      </span>\n    ),\n  }[status] || status);\n\nStatusCell.propTypes = {\n  status: propTypes.oneOfType([propTypes.string, propTypes.object]),\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 25,\n  },\n  sortByProp: 'name',\n  renderExport: (task) => task.name,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 10,\n  },\n  sortByProp: 'systems_count',\n  renderExport: (task) => task.systems_count,\n};\n\nexport const StatusColumn = {\n  title: 'Status',\n  props: {\n    width: 10,\n  },\n  sortByProp: 'status',\n  renderExport: (task) => task.status,\n  renderFunc: renderColumnComponent(StatusCell),\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'start_time',\n  renderExport: (task) => task.run_date_time,\n  renderFunc: (_, _empty, result) => result.run_date_time,\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  StatusColumn,\n  RunDateTimeColumn,\n];\n\nexport default [\n  TaskColumn,\n  SystemsCountColumn,\n  StatusColumn,\n  RunDateTimeColumn,\n];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = [\n  {\n    type: conditionalFilterType.text,\n    label: 'Task',\n    filter: (tasks, value) =>\n      tasks.filter((task) =>\n        task.task_title.toLowerCase().includes(value.toLowerCase())\n      ),\n  },\n];\n\nexport const statusFilter = [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'Status',\n    filter: (tasks, value) =>\n      tasks.filter((task) => value.includes(task.status.toLowerCase())),\n    items: [\n      { label: 'Completed', value: 'completed' },\n      { label: 'Running', value: 'running' },\n    ],\n  },\n];\n","import os from 'os';\nimport escapeStringRegexp from 'escape-string-regexp';\n\nconst extractPathRegex = /\\s+at.*[(\\s](.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|node:[\\w/]+|(?:(?:node:)?internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)(?:\\.js)?:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir().replace(/\\\\/g, '/');\n\nexport default function cleanStack(stack, {pretty = false, basePath} = {}) {\n\tconst basePathRegex = basePath && new RegExp(`(at | \\\\()${escapeStringRegexp(basePath.replace(/\\\\/g, '/'))}`, 'g');\n\n\tif (typeof stack !== 'string') {\n\t\treturn undefined;\n\t}\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar') ||\n\t\t\t\tmatch.includes('node_modules/electron/dist/resources/electron.asar') ||\n\t\t\t\tmatch.includes('node_modules/electron/dist/resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (basePathRegex) {\n\t\t\t\tline = line.replace(basePathRegex, '$1');\n\t\t\t}\n\n\t\t\tif (pretty) {\n\t\t\t\tline = line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n}\n","import indentString from 'indent-string';\nimport cleanStack from 'clean-stack';\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nexport default class AggregateError extends Error {\n\t#errors;\n\n\tname = 'AggregateError';\n\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = errors.map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' && error.stack.length > 0 ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.#errors = errors;\n\t}\n\n\tget errors() {\n\t\treturn this.#errors.slice();\n\t}\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","export default function indentString(string, count = 1, options = {}) {\n\tconst {\n\t\tindent = ' ',\n\t\tincludeEmptyLines = false\n\t} = options;\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (count < 0) {\n\t\tthrow new RangeError(\n\t\t\t`Expected \\`count\\` to be at least 0, got \\`${count}\\``\n\t\t);\n\t}\n\n\tif (typeof indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, indent.repeat(count));\n}\n","import AggregateError from 'aggregate-error';\n\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new AbortError(errorMessage)\n\t: new DOMException(errorMessage);\n\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\nconst getAbortedReason = signal => {\n\tconst reason = signal.reason === undefined\n\t\t? getDOMException('This operation was aborted.')\n\t\t: signal.reason;\n\n\treturn reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default async function pMap(\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Number.POSITIVE_INFINITY,\n\t\tstopOnError = true,\n\t\tsignal,\n\t} = {},\n) {\n\treturn new Promise((resolve, reject_) => {\n\t\tif (iterable[Symbol.iterator] === undefined && iterable[Symbol.asyncIterator] === undefined) {\n\t\t\tthrow new TypeError(`Expected \\`input\\` to be either an \\`Iterable\\` or \\`AsyncIterable\\`, got (${typeof iterable})`);\n\t\t}\n\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst skippedIndexesMap = new Map();\n\t\tlet isRejected = false;\n\t\tlet isResolved = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\t\tconst iterator = iterable[Symbol.iterator] === undefined ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n\n\t\tconst reject = reason => {\n\t\t\tisRejected = true;\n\t\t\tisResolved = true;\n\t\t\treject_(reason);\n\t\t};\n\n\t\tif (signal) {\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', () => {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t});\n\t\t}\n\n\t\tconst next = async () => {\n\t\t\tif (isResolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = await iterator.next();\n\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\t// Note: `iterator.next()` can be called many times in parallel.\n\t\t\t// This can cause multiple calls to this `next()` function to\n\t\t\t// receive a `nextItem` with `done === true`.\n\t\t\t// The shutdown logic that rejects/resolves must be protected\n\t\t\t// so it runs only one time as the `skippedIndex` logic is\n\t\t\t// non-idempotent.\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0 && !isResolved) {\n\t\t\t\t\tif (!stopOnError && errors.length > 0) {\n\t\t\t\t\t\treject(new AggregateError(errors));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tisResolved = true;\n\n\t\t\t\t\tif (skippedIndexesMap.size === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pureResult = [];\n\n\t\t\t\t\t// Support multiple `pMapSkip`'s.\n\t\t\t\t\tfor (const [index, value] of result.entries()) {\n\t\t\t\t\t\tif (skippedIndexesMap.get(index) === pMapSkip) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpureResult.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(pureResult);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t// Intentionally detached\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\n\t\t\t\t\tif (isResolved) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = await mapper(element, index);\n\n\t\t\t\t\t// Use Map to stage the index of the element.\n\t\t\t\t\tif (value === pMapSkip) {\n\t\t\t\t\t\tskippedIndexesMap.set(index, value);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult[index] = value;\n\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tawait next();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\n\t\t\t\t\t\t// In that case we can't really continue regardless of `stopOnError` state\n\t\t\t\t\t\t// since an iterable is likely to continue throwing after it throws once.\n\t\t\t\t\t\t// If we continue calling `next()` indefinitely we will likely end up\n\t\t\t\t\t\t// in an infinite loop of failed iteration.\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait next();\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\t// Create the concurrent runners in a detached (non-awaited)\n\t\t// promise. We need this so we can await the `next()` calls\n\t\t// to stop creating runners before hitting the concurrency limit\n\t\t// if the iterable has already been marked as done.\n\t\t// NOTE: We *must* do this for async iterators otherwise we'll spin up\n\t\t// infinite `next()` calls by default and never start the event loop.\n\t\t(async () => {\n\t\t\tfor (let index = 0; index < concurrency; index++) {\n\t\t\t\ttry {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tawait next();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (isIterableDone || isRejected) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n}\n\nexport const pMapSkip = Symbol('skip');\n","import pMap from 'p-map';\n\nexport default async function pAll(iterable, options) {\n\treturn pMap(iterable, element => element(), options);\n}\n","import React, { useState, useEffect } from 'react';\nimport { ExclamationCircleIcon, WrenchIcon } from '@patternfly/react-icons';\nimport moment from 'moment';\nimport columns, { exportableColumns } from './Columns';\nimport { nameFilter, statusFilter } from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport {\n  COMPLETED_TASKS_ERROR,\n  COMPLETED_TASKS_TABLE_DEFAULTS,\n  EMPTY_COMPLETED_TASKS_MESSAGE,\n  EMPTY_COMPLETED_TASKS_TITLE,\n  LOADING_ACTIVITIES_TABLE,\n  TASK_LOADING_CONTENT,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport { fetchExecutedTasks } from '../../../api';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport useActionResolver from './hooks/useActionResolvers';\nimport { useInterval } from '../../Utilities/hooks/useTableTools/useInterval';\nimport {\n  createNotification,\n  fetchTask,\n  fetchTaskJobs,\n  getSelectedSystems,\n  isError,\n} from '../completedTaskDetailsHelpers';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport RefreshFooterContent from '../RefreshFooterContent';\nimport usePromiseQueue from '../../Utilities/hooks/usePromiseQueue';\n\nconst ActivityTable = () => {\n  const [activities, setActivities] = useState(LOADING_ACTIVITIES_TABLE);\n  const [activityDetails, setActivityDetails] = useState(TASK_LOADING_CONTENT);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [error, setError] = useState();\n  const [taskError, setTaskError] = useState();\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const [isRunTaskAgain, setIsRunTaskAgain] = useState(false);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [taskDetails, setTaskDetails] = useState({});\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [lastUpdated, setLastUpdated] = useState();\n  const [isRunning, setIsRunning] = useState(false);\n\n  const { resolve } = usePromiseQueue();\n\n  const fetchTaskDetails = async (id) => {\n    setTaskError();\n    setRunTaskModalOpened(true);\n    const fetchedTaskDetails = await fetchTask(id, setTaskError);\n\n    if (Object.keys(fetchedTaskDetails).length > 0) {\n      const fetchedTaskJobs = await fetchTaskJobs(\n        fetchedTaskDetails,\n        setTaskError\n      );\n\n      setSelectedSystems(getSelectedSystems(fetchedTaskJobs));\n      await setActivityDetails(fetchedTaskDetails);\n    } else {\n      setRunTaskModalOpened(false);\n      await setActivityDetails({});\n    }\n  };\n\n  const fetchData = async (count) => {\n    let results;\n    const batchSize = 200;\n    const pages = Math.ceil(count / batchSize) || 1;\n    const result = await resolve(\n      [...new Array(pages)].map(\n        (_, pageIdx) => () =>\n          fetchExecutedTasks(\n            `?limit=${batchSize}&offset=${batchSize * pageIdx}`\n          )\n      )\n    );\n\n    if (isError(result[0])) {\n      createNotification(result[0]);\n      setError(result[0]);\n    } else {\n      results = result.map(({ data }) => data).flat();\n    }\n\n    if (results.some((result) => result.status === 'Running')) {\n      setIsRunning(true);\n    } else {\n      setIsRunning(false);\n    }\n\n    setTasks(results);\n  };\n\n  const handleCancelOrDeleteTask = async (task) => {\n    await setTaskDetails(task);\n    setIsDeleteCancelModalOpened(true);\n  };\n\n  const actionResolver = useActionResolver(\n    handleCancelOrDeleteTask,\n    fetchTaskDetails\n  );\n\n  const setTasks = async (result) => {\n    result?.map(\n      (task) => (task.run_date_time = renderRunDateTime(task.start_time))\n    );\n\n    await setActivities(result);\n    setTableLoading(false);\n  };\n\n  const refetchData = async () => {\n    setTableLoading(true);\n    await setActivities(LOADING_ACTIVITIES_TABLE);\n    fetchSingleTask();\n  };\n\n  const fetchSingleTask = async () => {\n    setLastUpdated(` ${moment().format('dddd, MMMM Do YYYY, h:mm a')}`);\n    const task = await fetchExecutedTasks(`?limit=1&offset=0`);\n    if (isError(task)) {\n      createNotification(task);\n      setError(task);\n      setActivities([]);\n    } else if (task.data.length === 0) {\n      setActivities([]);\n    } else {\n      fetchData(task.meta.count);\n    }\n  };\n\n  useEffect(() => {\n    fetchSingleTask();\n  }, []);\n\n  useInterval(() => {\n    if (isRunning) {\n      fetchSingleTask();\n    }\n  }, 60000);\n\n  useEffect(() => {\n    if (isDelete || isCancel) {\n      refetchData();\n      setIsDelete(false);\n      setIsCancel(false);\n    } else if (isRunTaskAgain) {\n      refetchData();\n      setIsRunTaskAgain(false);\n    }\n  }, [isCancel, isDelete, isRunTaskAgain]);\n\n  return (\n    <React.Fragment>\n      {runTaskModalOpened && (\n        <RunTaskModal\n          description={activityDetails.task_description}\n          error={taskError}\n          isOpen={runTaskModalOpened}\n          parameters={activityDetails.parameters}\n          selectedSystems={selectedSystems}\n          setIsRunTaskAgain={setIsRunTaskAgain}\n          setModalOpened={setRunTaskModalOpened}\n          slug={activityDetails.task_slug}\n          title={activityDetails.task_title}\n          name={activityDetails.name}\n        />\n      )}\n      <DeleteCancelTaskModal\n        id={taskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={taskDetails.start_time}\n        status={taskDetails.status}\n        title={taskDetails.task_title}\n      />\n      <div aria-label=\"activity\">\n        {error ? (\n          <EmptyStateDisplay\n            icon={ExclamationCircleIcon}\n            color=\"#c9190b\"\n            title={'Activities cannot be displayed'}\n            text={COMPLETED_TASKS_ERROR}\n            error={`Error ${error?.response?.status}: ${error?.message}`}\n          />\n        ) : activities?.length === 0 ? (\n          <EmptyStateDisplay\n            icon={WrenchIcon}\n            color=\"#6a6e73\"\n            title={EMPTY_COMPLETED_TASKS_TITLE}\n            text={EMPTY_COMPLETED_TASKS_MESSAGE}\n          />\n        ) : (\n          <TasksTables\n            label=\"activity-table\"\n            ouiaId=\"activity-table\"\n            columns={columns}\n            items={activities}\n            filters={{\n              filterConfig: [...nameFilter, ...statusFilter],\n            }}\n            options={{\n              ...TASKS_TABLE_DEFAULTS,\n              ...COMPLETED_TASKS_TABLE_DEFAULTS,\n              actionResolver,\n              exportable: {\n                ...TASKS_TABLE_DEFAULTS.exportable,\n                columns: exportableColumns,\n              },\n            }}\n            emptyRows={emptyRows('tasks')}\n            isStickyHeader\n            isTableLoading={tableLoading}\n            footerContent={\n              <RefreshFooterContent\n                footerContent={lastUpdated}\n                isRunning={isRunning}\n                type=\"tasks\"\n              />\n            }\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default ActivityTable;\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 5;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","const useActionResolver = (handleTask, fetchTaskDetails) => {\n  const onClick = (funcCall, task) => {\n    funcCall(task);\n  };\n\n  return (row) => [\n    {\n      title: 'Run this task again',\n      onClick: (_event, _index, task) =>\n        onClick(fetchTaskDetails, task.task.title.props.id),\n    },\n    {\n      title: 'Delete',\n      isDisabled: row.task.title.props.status !== 'Completed',\n      /*row.task.title.props.status === 'Completed' ||\n        row.task.title.props.status === 'Cancelled'\n          ? 'Delete'\n          : 'Cancel',*/\n      onClick: (_event, _index, task) => {\n        onClick(handleTask, task.task.title.props);\n      },\n    },\n  ];\n};\n\nexport default useActionResolver;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport ActivityTable from '../../SmartComponents/ActivityTable/ActivityTable';\nimport { fetchAvailableTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nimport './tasks-page.scss';\nimport useInsightsNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nconst TasksPage = ({ tab }) => {\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    setTab(tab);\n    setRunTaskModalOpened(false);\n  }, [tab]);\n\n  const navigate = useInsightsNavigate();\n\n  const updateTab = (event, index) => {\n    navigate(index ? '/executed' : '/available');\n  };\n\n  const openTaskModal = async (value, slug) => {\n    const task = await fetchAvailableTask(slug);\n    if (task?.response?.status && task?.response?.status !== 200) {\n      setError(task);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: task.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setActiveTask(task);\n    }\n\n    setRunTaskModalOpened(value);\n  };\n\n  return (\n    <React.Fragment>\n      {runTaskModalOpened ? (\n        <RunTaskModal\n          description={activeTask.description}\n          error={error}\n          isOpen={runTaskModalOpened}\n          parameters={activeTask.parameters}\n          selectedSystems={[]}\n          setModalOpened={setRunTaskModalOpened}\n          slug={activeTask.slug}\n          title={activeTask.title}\n        />\n      ) : null}\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <ActivityTable openTaskModal={openTaskModal} />\n            )}\n          </StackItem>\n        </Stack>\n      </section>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","CardBuilderContent","content","findChild","children","component","find","child","props","type","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","AvailableTasksTable","availableTasks","error","openTaskModal","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASKS_ERROR","response","status","message","length","task","description","Flex","direction","default","FlexItem","href","TASKS_API_ROOT","AVAILABLE_TASKS_ROOT","slug","RunTaskButton","isFirst","variant","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","size","SkeletonSize","AvailableTasks","useState","setAvailableTasks","isLoading","setIsLoading","setError","chrome","useChrome","setTasks","result","isError","dispatchNotification","dismissable","autoDismiss","data","useEffect","fetchData","fetchAvailableTasks","updateDocumentTitle","TaskNameCell","InsightsLink","to","StatusCell","Completed","style","display","alignItems","marginRight","Running","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","systems_count","StatusColumn","RunDateTimeColumn","run_date_time","_","_empty","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","task_title","toLowerCase","includes","statusFilter","items","extractPathRegex","pathRegex","homeDir","replace","AggregateError","Error","constructor","errors","TypeError","Object","assign","stack","pretty","basePath","basePathRegex","RegExp","string","escapeStringRegexp","split","line","pathMatches","match","test","trim","m","p1","join","cleanStack","String","count","options","indent","includeEmptyLines","RangeError","regex","repeat","indentString","super","this","slice","AbortError","getDOMException","errorMessage","undefined","globalThis","DOMException","getAbortedReason","signal","reason","pMapSkip","Symbol","async","pAll","iterable","mapper","concurrency","Number","POSITIVE_INFINITY","stopOnError","Promise","resolve","reject_","iterator","asyncIterator","isSafeInteger","skippedIndexesMap","Map","isRejected","isResolved","isIterableDone","resolvingCount","currentIndex","reject","aborted","addEventListener","next","nextItem","done","pureResult","entries","get","push","element","set","pMap","LOADING_ACTIVITIES_TABLE","activities","setActivities","TASK_LOADING_CONTENT","activityDetails","setActivityDetails","tableLoading","setTableLoading","taskError","setTaskError","isDelete","setIsDelete","isCancel","setIsCancel","isRunTaskAgain","setIsRunTaskAgain","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","taskDetails","setTaskDetails","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","lastUpdated","setLastUpdated","isRunning","setIsRunning","limit","isResolving","setIsResolving","promiseResults","setPromiseResults","useCallback","fns","results","usePromiseQueue","fetchTaskDetails","fetchTask","fetchedTaskDetails","keys","fetchTaskJobs","fetchedTaskJobs","getSelectedSystems","pages","Math","ceil","pageIdx","fetchExecutedTasks","createNotification","flat","some","handleCancelOrDeleteTask","actionResolver","handleTask","onClick","funcCall","row","_event","_index","isDisabled","useActionResolver","renderRunDateTime","start_time","refetchData","fetchSingleTask","moment","format","meta","useInterval","RunTaskModal","task_description","isOpen","parameters","setModalOpened","task_slug","DeleteCancelTaskModal","startTime","COMPLETED_TASKS_ERROR","WrenchIcon","EMPTY_COMPLETED_TASKS_TITLE","EMPTY_COMPLETED_TASKS_MESSAGE","TasksTables","ouiaId","columns","filters","filterConfig","TASKS_TABLE_DEFAULTS","COMPLETED_TASKS_TABLE_DEFAULTS","exportable","emptyRows","isStickyHeader","isTableLoading","footerContent","RefreshFooterContent","TasksPage","tab","setTab","activeTask","setActiveTask","navigate","useInsightsNavigate","fetchAvailableTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Stack","hasGutter","StackItem"],"sourceRoot":""}