{"version":3,"file":"js/TasksPage.1656419807822.733ddd3fd150b93b0117.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/SmartComponents/SystemTable/constants.js","webpack:///./api.js","webpack:///./src/SmartComponents/SystemTable/helpers.js","webpack:///./src/SmartComponents/SystemTable/hooks.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/SystemTable/SystemTable.js","webpack:///./src/PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay.js","webpack:///./src/SmartComponents/RunTaskModal/RunTaskModal.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/PresentationalComponents/RunTaskButton/RunTaskButton.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/CompletedTasksTable/Columns.js","webpack:///./src/SmartComponents/CompletedTasksTable/Filters.js","webpack:///./src/SmartComponents/CompletedTasksTable/CompletedTasksTable.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import { entitiesReducer } from '../../store/index';\n\nexport const systemColumns = [\n  {\n    key: 'display_name',\n    sortKey: 'display_name',\n    props: { width: 20 },\n    title: 'Name',\n  },\n  'tags',\n  {\n    key: 'os_version',\n    sortKey: 'os_version',\n    props: { width: 10 },\n    title: 'OS',\n  },\n  'updated',\n];\n\nexport const defaultOnLoad = (columns, getRegistry) => {\n  return ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns), {\n        page: 1,\n        perPage: 10,\n        sortBy: {\n          key: 'last_updated',\n          direction: 'desc',\n        },\n      }),\n    });\n};\n","import axios from 'axios';\nimport {\n  TASKS_API_ROOT,\n  AVAILABLE_TASKS_ROOT,\n  EXECUTED_TASKS_ROOT,\n  SYSTEMS_ROOT,\n} from './src/constants';\n\nconst getTasks = async (path) => {\n  let response;\n\n  const request = await axios\n    .get(TASKS_API_ROOT.concat(path))\n    .catch(function (error) {\n      return error;\n    });\n\n  if (request.status === 200) {\n    response = request.data;\n  } else {\n    response = request;\n  }\n\n  return response;\n};\n\nexport const fetchAvailableTasks = () => {\n  return getTasks(AVAILABLE_TASKS_ROOT);\n};\n\nexport const fetchAvailableTask = (slug) => {\n  return getTasks(AVAILABLE_TASKS_ROOT.concat(`/${slug}`));\n};\n\nexport const fetchExecutedTasks = () => {\n  return getTasks(EXECUTED_TASKS_ROOT);\n};\n\nexport const fetchExecutedTask = (path) => {\n  return getTasks(EXECUTED_TASKS_ROOT.concat(path));\n};\n\nexport const fetchExecutedTaskJobs = (id) => {\n  let idPath = `/${id}`;\n  return fetchExecutedTask(idPath.concat('/jobs'));\n};\n\nexport const fetchSystems = (path) => {\n  return getTasks(SYSTEMS_ROOT.concat(path));\n};\n","const buildSortString = (orderBy, orderDirection) => {\n  let sortString = orderBy ? '&sort=' : '';\n  let direction = '';\n  if (orderDirection === 'DESC') {\n    direction = '-';\n  }\n  let order = orderBy === 'updated' ? 'last_seen' : orderBy;\n\n  return `${sortString}${direction}${order}`;\n};\n\nconst buildFilterString = (filters) => {\n  let displayNameFilter = filters.hostnameOrId\n    ? `&display_name=${filters.hostnameOrId}`\n    : '';\n\n  return `${displayNameFilter}`;\n};\n\nexport const buildFilterSortString = (\n  limit,\n  offset,\n  orderBy,\n  orderDirection,\n  filters\n) => {\n  let limitOffsetString = `limit=${limit}&offset=${offset}`;\n  let sortString = buildSortString(orderBy, orderDirection);\n  let filterString = buildFilterString(filters);\n  return `?${limitOffsetString}${sortString}${filterString}`;\n};\n","import { fetchSystems } from '../../../api';\nimport { buildFilterSortString } from './helpers';\n\nexport const useGetEntities = (selectedIds) => {\n  return async (\n    _items,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const limit = perPage;\n    const offset = page * perPage - perPage;\n    const filterSortString = buildFilterSortString(\n      limit,\n      offset,\n      orderBy,\n      orderDirection,\n      filters\n    );\n    const fetchedEntities = await fetchSystems(filterSortString);\n\n    const {\n      data,\n      meta: { count },\n    } = fetchedEntities || {};\n\n    return {\n      results: data.map((entity) => ({\n        ...entity,\n        selected: (selectedIds || []).map((id) => id).includes(entity.id),\n      })),\n      page,\n      perPage,\n      orderBy,\n      orderDirection,\n      total: count,\n    };\n  };\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Unable to load inventory component\"),\n        React.createElement(\"h2\", null,\n            \"Failed to load \",\n            component),\n        React.createElement(\"code\", null, \"More info can be found in browser console output.\")));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useContext, useEffect, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport { defaultOnLoad, systemColumns } from './constants';\nimport { useGetEntities } from './hooks';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Spinner } from '@patternfly/react-core';\nimport { RegistryContext } from '../../store';\nimport { useDispatch } from 'react-redux';\n\nconst SystemTable = ({ selectedIds, selectIds }) => {\n  const inventory = useRef(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: 'INVENTORY_INIT' });\n    dispatch({ type: 'RESET_PAGE' });\n    inventory?.current?.onRefreshData();\n  }, [dispatch]);\n\n  const mergedColumns = (defaultColumns) =>\n    systemColumns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <InventoryTable\n      isFullView\n      autoRefresh\n      initialLoading\n      showTags\n      hideFilters={{\n        all: true,\n        //name: false,\n        //tags: false,\n        //operatingSystem: false,\n      }}\n      columns={mergedColumns}\n      ref={inventory}\n      fallback={<Spinner />}\n      onLoad={defaultOnLoad(systemColumns, getRegistry)}\n      getEntities={useGetEntities(selectedIds)}\n      tableProps={{\n        canSelectAll: false,\n        isStickyHeader: true,\n        onSelect: selectIds,\n      }}\n    />\n  );\n};\n\nSystemTable.propTypes = {\n  selectedIds: propTypes.array,\n  selectIds: propTypes.func,\n};\n\nexport default SystemTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nexport const EmptyStateDisplay = ({\n  button,\n  color,\n  error,\n  icon,\n  isSmall,\n  text,\n  title,\n}) => {\n  return (\n    <EmptyState\n      variant={isSmall ? EmptyStateVariant.small : EmptyStateVariant.large}\n    >\n      {icon ? (\n        <EmptyStateIcon\n          icon={icon}\n          color={color ? color : null}\n          className={isSmall ? 'small-empty-state-icon' : null}\n        />\n      ) : null}\n      <br></br>\n      <Title headingLevel={isSmall ? 'h5' : 'h1'} size={isSmall ? 'md' : 'lg'}>\n        {title}\n      </Title>\n      <EmptyStateBody>\n        {text\n          ? text.map((line, index) => (\n              <React.Fragment key={`line-${index}`}>\n                {line}\n                <br />\n              </React.Fragment>\n            ))\n          : null}\n        {error ? error : null}\n      </EmptyStateBody>\n      {button}\n    </EmptyState>\n  );\n};\n\nEmptyStateDisplay.propTypes = {\n  button: PropTypes.object,\n  color: PropTypes.string,\n  error: PropTypes.string,\n  icon: PropTypes.any,\n  isSmall: PropTypes.bool,\n  text: PropTypes.array,\n  title: PropTypes.string,\n};\n\nexport default EmptyStateDisplay;\n","import React, { useEffect, useState } from 'react';\nimport { Flex, FlexItem, Modal } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport SystemTable from '../SystemTable/SystemTable';\nimport { useDispatch } from 'react-redux';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  TASKS_API_ROOT,\n  TASK_ERROR,\n} from '../../constants';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\n\nconst RunTaskModal = ({ error, task, isOpen, setModalOpened }) => {\n  const [selectedIds, setSelectedIds] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setSelectedIds([]);\n  }, [task]);\n\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITY',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n  }, [selectedIds]);\n\n  const selectIds = (_event, _isSelected, _index, entity) => {\n    let newSelectedIds = [...selectedIds];\n\n    !newSelectedIds.includes(entity.id)\n      ? newSelectedIds.push(entity.id)\n      : newSelectedIds.splice(newSelectedIds.indexOf(entity.id), 1);\n\n    setSelectedIds(newSelectedIds);\n  };\n\n  return (\n    <Modal\n      aria-label=\"run-task-modal\"\n      title={task.title || 'Error'}\n      isOpen={isOpen}\n      onClose={() => setModalOpened(false)}\n      width={'70%'}\n    >\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'This task cannot be displayed'}\n          text={TASK_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : (\n        <React.Fragment>\n          <Flex>\n            <FlexItem>\n              <b>Task description</b>\n            </FlexItem>\n          </Flex>\n          <Flex style={{ paddingBottom: '8px' }}>\n            <FlexItem>{task.description}</FlexItem>\n          </Flex>\n          <Flex>\n            <FlexItem>\n              <a\n                href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n              >\n                Download preview of playbook\n              </a>\n            </FlexItem>\n          </Flex>\n          <br />\n          <b>Systems to run tasks on</b>\n          <SystemTable selectedIds={selectedIds} selectIds={selectIds} />\n        </React.Fragment>\n      )}\n    </Modal>\n  );\n};\n\nRunTaskModal.propTypes = {\n  error: propTypes.object,\n  isOpen: propTypes.bool,\n  setModalOpened: propTypes.func,\n  task: propTypes.object,\n};\n\nexport default RunTaskModal;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst RunTaskButton = ({\n  classname,\n  isFirst,\n  openTaskModal,\n  slug,\n  variant,\n}) => {\n  return (\n    <Button\n      aria-label={`${slug}-run-task-button`}\n      className={classname}\n      variant={variant}\n      onClick={() => openTaskModal(slug)}\n    >\n      {isFirst ? 'Run task' : 'Run task again'}\n    </Button>\n  );\n};\n\nRunTaskButton.propTypes = {\n  classname: propTypes.string,\n  isFirst: propTypes.bool,\n  openTaskModal: propTypes.func,\n  slug: propTypes.string,\n  variant: propTypes.string,\n};\n\nexport default RunTaskButton;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_API_ROOT,\n  TASKS_ERROR,\n} from '../../constants';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks?.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          return (\n            <React.Fragment aria-label={task.title} key={task.title}>\n              <CardBuilder>\n                <CardBuilderContent content={task.title} type=\"title\" />\n                <CardBuilderContent\n                  className=\"card-task-description\"\n                  content={task.description}\n                  type=\"body\"\n                />\n                <CardBuilderContent\n                  content={\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <a\n                          href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n                        >\n                          Download preview of playbook\n                        </a>\n                      </FlexItem>\n                      <FlexItem>\n                        <RunTaskButton\n                          slug={task.slug}\n                          isFirst\n                          variant=\"primary\"\n                          openTaskModal={openTaskModal}\n                        />\n                      </FlexItem>\n                    </Flex>\n                  }\n                  type=\"footer\"\n                />\n              </CardBuilder>\n              <br />\n            </React.Fragment>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const setTasks = (result) => {\n    if (result?.response?.status && result?.response?.status !== 200) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n      });\n    } else {\n      setAvailableTasks(result.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  renderColumnComponent,\n  renderRunDateTime,\n} from '../../Utilities/helpers';\n\nconst TaskNameCell = ({ id, title }, index) => (\n  <Link key={`task-title-${index}`} to={`/executed/${id}`}>\n    {title}\n  </Link>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  title: propTypes.string,\n  index: propTypes.number,\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'title',\n  renderExport: (task) => task.title,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'system_count',\n  renderExport: (task) => task.system_count,\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'run_date_time',\n  renderExport: (task) => renderRunDateTime(task.run_date_time),\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  RunDateTimeColumn,\n];\n\nexport default [TaskColumn, SystemsCountColumn, RunDateTimeColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = {\n  type: conditionalFilterType.text,\n  label: 'Task',\n  filter: (tasks, value) =>\n    tasks.filter((task) =>\n      task.title.toLowerCase().includes(value.toLowerCase())\n    ),\n};\n","import React, { useState, useEffect } from 'react';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport columns, { exportableColumns } from './Columns';\n//import { fetchExecutedTasks } from '../../../api';\nimport { completedTasksTableItems } from '../../Utilities/hooks/useTableTools/Components/__tests__/TasksTable.fixtures';\nimport * as Filters from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport { TASKS_TABLE_DEFAULTS } from '../../constants';\n\nconst CompletedTasksTable = () => {\n  const filters = Object.values(Filters);\n  const [completedTasks, setCompletedTasks] = useState([]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      //const result = fetchExecutedTasks();\n      const result = completedTasksTableItems;\n      result.map((task) => (task.run_date_time = renderRunDateTime(task.end)));\n\n      setCompletedTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <TasksTables\n      label=\"completed-tasks\"\n      ouiaId=\"completed-tasks-table\"\n      columns={columns}\n      items={completedTasks}\n      filters={{\n        filterConfig: filters,\n      }}\n      options={{\n        ...TASKS_TABLE_DEFAULTS,\n        exportable: {\n          ...TASKS_TABLE_DEFAULTS.exportable,\n          columns: exportableColumns,\n        },\n      }}\n      //emptyRows={emptyRows}\n      isStickyHeader\n    />\n  );\n};\n\nexport default CompletedTasksTable;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport CompletedTasksTable from '../../SmartComponents/CompletedTasksTable/CompletedTasksTable';\nimport { fetchAvailableTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nimport './tasks-page.scss';\n\nconst TasksPage = ({ tab }) => {\n  const history = useHistory();\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    if (tab === 0) {\n      history.push('available');\n    }\n  }, []);\n\n  const updateTab = (event, index) => {\n    history.push(index ? 'executed' : 'available');\n    setTab(index);\n  };\n\n  const openTaskModal = async (slug) => {\n    const task = await fetchAvailableTask(slug);\n    if (task?.response?.status && task?.response?.status !== 200) {\n      setError(task);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: task.message,\n        dismissable: true,\n      });\n    } else {\n      setActiveTask(task);\n    }\n\n    setRunTaskModalOpened(true);\n  };\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        error={error}\n        task={activeTask}\n        isOpen={runTaskModalOpened}\n        setModalOpened={setRunTaskModalOpened}\n      />\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <Main>\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <CompletedTasksTable />\n            )}\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","systemColumns","sortKey","props","defaultOnLoad","columns","getRegistry","INVENTORY_ACTION_TYPES","mergeWithEntities","register","entitiesReducer","page","perPage","sortBy","direction","getTasks","async","path","response","request","catch","error","status","data","fetchAvailableTask","slug","buildFilterSortString","limit","offset","orderBy","orderDirection","filters","limitOffsetString","sortString","order","buildSortString","filterString","displayNameFilter","hostnameOrId","buildFilterString","useGetEntities","selectedIds","_items","per_page","filterSortString","fetchedEntities","count","meta","results","entity","selected","includes","total","_a","component","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","concat","__assign","assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","useStore","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","InvTable","defaultProps","Bullseye","Spinner","size","SystemTable","selectIds","inventory","useRef","useContext","RegistryContext","dispatch","useDispatch","type","current","onRefreshData","InventoryTable","isFullView","autoRefresh","initialLoading","showTags","hideFilters","all","defaultColumns","column","isStringCol","defaultColumn","find","defaultCol","onLoad","getEntities","tableProps","canSelectAll","isStickyHeader","EmptyStateDisplay","button","color","icon","isSmall","text","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","Title","headingLevel","EmptyStateBody","line","RunTaskModal","task","isOpen","setModalOpened","useState","setSelectedIds","payload","Modal","onClose","ExclamationCircleIcon","TASK_ERROR","message","Flex","FlexItem","style","paddingBottom","description","href","TASKS_API_ROOT","AVAILABLE_TASKS_ROOT","_event","_isSelected","_index","newSelectedIds","splice","push","CardBuilderContent","content","findChild","children","child","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","RunTaskButton","classname","isFirst","openTaskModal","Button","onClick","AvailableTasksTable","availableTasks","TASKS_ERROR","default","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","SkeletonSize","AvailableTasks","setAvailableTasks","isLoading","setIsLoading","setError","setTasks","result","dispatchNotification","dismissable","fetchData","TaskNameCell","Link","to","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","system_count","RunDateTimeColumn","renderRunDateTime","run_date_time","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","toLowerCase","values","Filters","completedTasks","setCompletedTasks","completedTasksTableItems","end","TasksTables","ouiaId","items","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","TasksPage","tab","setTab","runTaskModalOpened","setRunTaskModalOpened","activeTask","setActiveTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Main","Stack","hasGutter","StackItem"],"sourceRoot":""}