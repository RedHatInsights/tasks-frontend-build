{"version":3,"file":"js/35.1660851141018.baaade1d429580062188.js","mappings":"6MAIMA,GAAYC,EAAAA,EAAAA,OAAK,kBACrB,gEAKIC,GAAuBD,EAAAA,EAAAA,OAAK,kBAChC,iEAaWE,EAAS,kBACpB,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,EAAAC,QAAD,QAIJ,kBAAC,EAAAC,OAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAACZ,EAAD,CAAWa,IAAK,OACpD,kBAAC,EAAAJ,MAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBAAM,kBAACZ,EAAD,CAAWa,IAAK,OAC7D,kBAAC,EAAAJ,MAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBAAM,kBAACZ,EAAD,CAAWa,IAAK,OAC5D,kBAAC,EAAAJ,MAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBG,UAAWZ,IAC7C,kBAAC,EAAAO,MAAD,KACE,kBAAC,EAAAM,SAAD,CAAUC,GAAG,U,4DCGrB,EA9BY,SAACC,GACX,IAAMC,GAAUC,EAAAA,EAAAA,cACVC,GAASC,EAAAA,EAAAA,KAoBf,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EACJ,GAAIH,EAAQ,EACOI,EAAAA,EAAAA,MACRC,SAAS,CAAEC,cAAeC,EAAAA,KACnC,MAA2CP,EAAOQ,OAA1CC,EAAR,EAAQA,YAAiBC,EAAzB,EAAqBC,GAGrBF,EAAYG,GACZT,EAAaO,EAAc,kBAAkB,SAACG,GAAD,OAC3Cf,EAAQgB,KAAR,WAAiBD,EAAME,WAG3B,OAAO,WACLZ,OAED,CAACH,IAGF,kBAAC,EAAAgB,SAAD,KACE,kBAAC,KAAD,MACA,kBAACjC,EAAD,CAAQkC,WAAYpB,M,eCf1B,QAdc,WACZ,IAAMqB,GAAWV,EAAAA,EAAAA,MAEjB,OACE,kBAAC,cAAD,CAA0BW,MAAO,CAAEf,YAAa,kBAAMc,KACpD,kBAAC,EAAAE,SAAD,CAAUC,MAAOH,EAASI,YACxB,kBAAC,gBAAD,CAAQC,UAAUC,EAAAA,EAAAA,IAAYC,OAAOC,SAASC,WAC5C,kBAAC,EAAD,UCVV,IAAMC,EAAOC,SAASC,eAAe,QAErCC,IAAAA,OAAgB,kBAAC,EAAD,MAAWH,GAAM,kBAC/BA,EAAKI,aAAa,kBAAkB,O,8ECDlCd,E,ypBAEG,IAAMe,GAAkBC,EAAAA,EAAAA,eAAc,CAC3C9B,YAAa,eAGR,SAASI,IAAoB,2BAAZ2B,EAAY,yBAAZA,EAAY,gBAOlC,OANAjB,GAAWd,EAAAA,EAAAA,IAAY,GAAD,CACpBgC,KADoB,eAEjBD,EAAWE,QAAO,SAACC,GAAD,YAA0B,IAATA,SAG/BjC,SAAS,CAAEC,cAAeC,EAAAA,KAC5BW,EAGF,SAASI,IACd,OAAOJ,EAASI,WAGlB,IAAMiB,EAAa,SAACC,EAAMC,GAAP,OACjBD,EAAKE,KAAI,SAACC,GAAD,cACJA,GADI,IAEPF,SAAUA,EAASG,SAASD,EAAIE,UAGvBC,EAAkB,wBAC7BC,EAAAA,EAAAA,KAAgB,eACb,kBAAmB,iBAAO,CACzBP,KAAM,GACNQ,MAAO,OAHK,SAKb,cAAe,SAACC,GAAD,cACXA,GADW,IAEdC,KAAM,EACNC,QAAS,SARG,SAUb,iBAAkB,SAACF,EAAD,GAAsC,IAAjBR,EAAiB,EAA5BW,QAAWX,SACtC,cACKQ,GADL,IAEET,KAAMD,EAAWU,EAAMT,MAAQ,GAAIC,QAbzB,M","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst TasksPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"TasksPage\" */ './SmartComponents/TasksPage/TasksPage'\n  )\n);\n\nconst CompletedTaskDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"CompletedTaskDetails\" */ './SmartComponents/CompletedTaskDetails/CompletedTaskDetails'\n  )\n);\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route exact path=\"/\" render={() => <TasksPage tab={0} />} />\n      <Route exact path=\"/available\" render={() => <TasksPage tab={0} />} />\n      <Route exact path=\"/executed\" render={() => <TasksPage tab={1} />} />\n      <Route exact path=\"/executed/:id\" component={CompletedTaskDetails} />\n      <Route>\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\nconst App = (props) => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    let unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer });\n      const { identifyApp, on: onChromeEvent } = chrome.init();\n\n      // You can use directly the name of your app\n      identifyApp(pckg.insights.appname);\n      unregister = onChromeEvent('APP_NAVIGATION', (event) =>\n        history.push(`/${event.navId}`)\n      );\n    }\n    return () => {\n      unregister();\n    };\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst Tasks = () => {\n  const registry = init();\n\n  return (\n    <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n      <Provider store={registry.getStore()}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nexport default Tasks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tasks from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<Tasks />, root, () =>\n  root.setAttribute('data-ouia-safe', true)\n);\n","import { createContext } from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({ notifications: notificationsReducer });\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n      perPage: 10,\n    }),\n    ['SELECT_ENTITY']: (state, { payload: { selected } }) => {\n      return {\n        ...state,\n        rows: selectRows(state.rows || [], selected),\n      };\n    },\n  });\n"],"names":["TasksPage","lazy","CompletedTaskDetails","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","exact","path","render","tab","component","Redirect","to","props","history","useHistory","chrome","useChrome","useEffect","unregister","getRegistry","register","notifications","notificationsReducer","init","identifyApp","onChromeEvent","on","pckg","event","push","navId","Fragment","childProps","registry","value","Provider","store","getStore","basename","getBaseName","window","location","pathname","root","document","getElementById","ReactDOM","setAttribute","RegistryContext","createContext","middleware","promiseMiddleware","filter","item","selectRows","rows","selected","map","row","includes","id","entitiesReducer","applyReducerHash","total","state","page","perPage","payload"],"sourceRoot":""}