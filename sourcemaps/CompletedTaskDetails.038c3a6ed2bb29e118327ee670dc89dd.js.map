{"version":3,"file":"js/CompletedTaskDetails.1663684657809.93b17f14843278d97590.js","mappings":"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","sources":["webpack:///./src/SmartComponents/CompletedTaskDetails/Columns.js","webpack:///./src/SmartComponents/CompletedTaskDetails/Filters.js","webpack:///./src/PresentationalComponents/BreadcrumbLinkItem/BreadcrumbLinkItem.js","webpack:///./src/SmartComponents/CompletedTaskDetails/CompletedTaskDetails.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { renderColumnComponent } from '../../Utilities/helpers';\n\nconst SystemNameCell = ({ system, display_name }, index) => (\n  <a\n    key={`system-title-${index}`}\n    href={\n      insights.chrome.isBeta()\n        ? `/beta/insights/inventory/${system}`\n        : `/insights/inventory/${system}`\n    }\n  >\n    {display_name}\n  </a>\n);\n\nSystemNameCell.propTypes = {\n  system: propTypes.string,\n  display_name: propTypes.node,\n};\n\nexport const SystemColumn = {\n  title: 'System name',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'display_name',\n  renderExport: (job) => job.display_name,\n  renderFunc: renderColumnComponent(SystemNameCell),\n};\n\nexport const StatusColumn = {\n  title: 'Status',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'status',\n  renderExport: (job) => job.status,\n};\n\nexport const MessageColumn = {\n  title: 'Message',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'message',\n  renderExport: (job) => job.message,\n};\n\nexport const exportableColumns = [SystemColumn, StatusColumn, MessageColumn];\n\nexport default [SystemColumn, StatusColumn, MessageColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const systemFilter = [\n  {\n    type: conditionalFilterType.text,\n    label: 'System',\n    filter: (jobs, value) =>\n      jobs.filter((job) =>\n        job.display_name.toLowerCase().includes(value.toLowerCase())\n      ),\n  },\n];\n\nexport const statusFilters = [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'Status',\n    filter: (jobs, value) =>\n      jobs.filter((job) => value.includes(job.status.toLowerCase())),\n    items: [\n      { label: 'Running', value: 'running' },\n      { label: 'Success', value: 'success' },\n      { label: 'Failure', value: 'failure' },\n      { label: 'Timeout', value: 'timeout' },\n      { label: 'Cancelled', value: 'cancelled' },\n    ],\n  },\n];\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { BreadcrumbItem } from '@patternfly/react-core';\n\nconst RouterLink = ({ href, ...props }) => {\n  return <Link {...props} to={href} />;\n};\n\nRouterLink.propTypes = {\n  href: propTypes.string,\n};\n\nconst BreadcrumbLinkItem = ({ children, ...props }) => (\n  <BreadcrumbItem {...props} component={RouterLink}>\n    {children}\n  </BreadcrumbItem>\n);\n\nBreadcrumbLinkItem.propTypes = {\n  children: propTypes.node,\n};\n\nexport default BreadcrumbLinkItem;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Card,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { statusFilters, systemFilter } from './Filters';\nimport {\n  COMPLETED_INFO_PANEL,\n  COMPLETED_INFO_PANEL_FLEX_PROPS,\n  COMPLETED_INFO_BUTTONS,\n  COMPLETED_INFO_BUTTONS_FLEX_PROPS,\n  LOADING_INFO_PANEL,\n  LOADING_JOBS_TABLE,\n  TASK_ERROR,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport BreadcrumbLinkItem from '../../PresentationalComponents/BreadcrumbLinkItem/BreadcrumbLinkItem';\nimport {\n  getSelectedSystems,\n  fetchTask,\n  fetchTaskJobs,\n} from '../completedTaskDetailsHelpers';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\n\nconst CompletedTaskDetails = () => {\n  const { id } = useParams();\n  const [completedTaskDetails, setCompletedTaskDetails] =\n    useState(LOADING_INFO_PANEL);\n  const [completedTaskJobs, setCompletedTaskJobs] =\n    useState(LOADING_JOBS_TABLE);\n  const [error, setError] = useState();\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const history = useHistory();\n  const { hasAccess, isLoading } = usePermissions('inventory', [\n    'inventory:*:*',\n    'inventory:*:read',\n  ]);\n\n  const fetchData = async () => {\n    const fetchedTaskDetails = await fetchTask(id, setError);\n\n    if (Object.keys(fetchedTaskDetails).length) {\n      const fetchedTaskJobs = await fetchTaskJobs(fetchedTaskDetails, setError);\n\n      if (fetchedTaskJobs.length) {\n        await setCompletedTaskDetails(fetchedTaskDetails);\n        await setCompletedTaskJobs(fetchedTaskJobs);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedSystems(getSelectedSystems(completedTaskJobs));\n  }, [completedTaskJobs]);\n\n  useEffect(async () => {\n    if (isDelete) {\n      history.push('/executed');\n      setIsDelete(false);\n    }\n\n    if (isCancel) {\n      await setCompletedTaskDetails(LOADING_INFO_PANEL);\n      await setCompletedTaskJobs(LOADING_JOBS_TABLE);\n      await fetchData();\n      setIsCancel(false);\n    }\n  }, [isCancel, isDelete]);\n\n  return (\n    <div>\n      <RunTaskModal\n        description={completedTaskDetails.task_description}\n        error={error}\n        isOpen={runTaskModalOpened}\n        selectedSystems={selectedSystems}\n        setModalOpened={setRunTaskModalOpened}\n        slug={completedTaskDetails.task_slug}\n        title={completedTaskDetails.task_title}\n      />\n      <DeleteCancelTaskModal\n        id={completedTaskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={completedTaskDetails.start_time}\n        status={completedTaskDetails.status}\n        title={completedTaskDetails.task_title}\n      />\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Task cannot be displayed'}\n          text={TASK_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : (\n        <React.Fragment>\n          <PageHeader>\n            <Breadcrumb ouiaId=\"completed-tasks-details-breadcrumb\">\n              <BreadcrumbLinkItem to=\"/executed\">Tasks</BreadcrumbLinkItem>\n              <BreadcrumbItem isActive>\n                {completedTaskDetails.task_title}\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <Flex direction={{ default: 'column', md: 'row' }}>\n              <Flex\n                direction={{ default: 'column' }}\n                flex={{ default: 'flex_1' }}\n              >\n                <FlexItem>\n                  <PageHeaderTitle title={completedTaskDetails.task_title} />\n                </FlexItem>\n                <FlexItem>{completedTaskDetails.description}</FlexItem>\n              </Flex>\n              <FlexibleFlex\n                data={completedTaskDetails}\n                flexContents={COMPLETED_INFO_BUTTONS(\n                  completedTaskDetails.task_slug,\n                  setRunTaskModalOpened,\n                  completedTaskDetails.status,\n                  setIsDeleteCancelModalOpened\n                )}\n                flexProps={COMPLETED_INFO_BUTTONS_FLEX_PROPS}\n              />\n            </Flex>\n          </PageHeader>\n          <Main>\n            <Card>\n              <Flex\n                className=\"completed-task-details-info-border\"\n                justifyContent={{ default: 'justifyContentSpaceBetween' }}\n                direction={{ default: 'column', md: 'row' }}\n              >\n                <FlexibleFlex\n                  data={completedTaskDetails}\n                  flexContents={COMPLETED_INFO_PANEL}\n                  flexProps={COMPLETED_INFO_PANEL_FLEX_PROPS}\n                />\n              </Flex>\n            </Card>\n            <br />\n            <Card>\n              {!isLoading && hasAccess ? (\n                <TasksTables\n                  label={`${completedTaskDetails.id}-completed-jobs`}\n                  ouiaId={`${completedTaskDetails.id}-completed-jobs-table`}\n                  columns={columns}\n                  items={completedTaskJobs}\n                  filters={{\n                    filterConfig: [...statusFilters, ...systemFilter],\n                  }}\n                  options={{\n                    ...TASKS_TABLE_DEFAULTS,\n                    exportable: {\n                      ...TASKS_TABLE_DEFAULTS.exportable,\n                      columns: exportableColumns,\n                    },\n                  }}\n                  emptyRows={emptyRows('jobs')}\n                  isStickyHeader\n                />\n              ) : (\n                <NotAuthorized serviceName=\"Inventory\" />\n              )}\n            </Card>\n          </Main>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default CompletedTaskDetails;\n"],"names":["SystemNameCell","index","system","display_name","key","href","insights","chrome","isBeta","propTypes","SystemColumn","title","props","width","sortByProp","renderExport","job","renderFunc","renderColumnComponent","StatusColumn","status","MessageColumn","message","exportableColumns","systemFilter","type","conditionalFilterType","label","filter","jobs","value","toLowerCase","includes","statusFilters","items","RouterLink","Link","to","BreadcrumbLinkItem","children","BreadcrumbItem","component","id","useParams","useState","LOADING_INFO_PANEL","completedTaskDetails","setCompletedTaskDetails","LOADING_JOBS_TABLE","completedTaskJobs","setCompletedTaskJobs","error","setError","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","isDelete","setIsDelete","isCancel","setIsCancel","history","useHistory","usePermissions","hasAccess","isLoading","fetchData","fetchTask","fetchedTaskDetails","Object","keys","length","fetchTaskJobs","fetchedTaskJobs","useEffect","getSelectedSystems","push","RunTaskModal","description","task_description","isOpen","setModalOpened","slug","task_slug","task_title","DeleteCancelTaskModal","startTime","start_time","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASK_ERROR","response","PageHeader","Breadcrumb","ouiaId","isActive","Flex","direction","default","md","flex","FlexItem","PageHeaderTitle","FlexibleFlex","data","flexContents","COMPLETED_INFO_BUTTONS","flexProps","COMPLETED_INFO_BUTTONS_FLEX_PROPS","Main","Card","className","justifyContent","COMPLETED_INFO_PANEL","COMPLETED_INFO_PANEL_FLEX_PROPS","TasksTables","columns","filters","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","emptyRows","isStickyHeader","NotAuthorized","serviceName"],"sourceRoot":""}