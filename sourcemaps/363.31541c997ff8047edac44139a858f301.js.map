{"version":3,"file":"js/363.1667329822641.6c03d42dab03591ff071.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/PresentationalComponents/WithPermission/WithPermission.js","webpack:///./src/Routes.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\nconst App = (props) => {\n  const history = useHistory();\n  const chrome = useChrome();\n\n  useEffect(() => {\n    let unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer });\n      const { identifyApp, on: onChromeEvent } = chrome.init();\n\n      // You can use directly the name of your app\n      identifyApp(pckg.insights.appname);\n      unregister = onChromeEvent('APP_NAVIGATION', (event) =>\n        history.push(`/${event.navId}`)\n      );\n    }\n    return () => {\n      unregister();\n    };\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst Tasks = () => {\n  const registry = init();\n\n  return (\n    <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n      <Provider store={registry.getStore()}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nexport default Tasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\n\nconst WithPermission = ({ children, requiredPermissions = [] }) => {\n  const { hasAccess, isLoading } = usePermissions('tasks', requiredPermissions);\n\n  if (!isLoading) {\n    return hasAccess ? children : <NotAuthorized serviceName=\"Tasks\" />;\n  } else {\n    return '';\n  }\n};\n\nWithPermission.propTypes = {\n  children: propTypes.node,\n  requiredPermissions: propTypes.array,\n};\n\nexport default WithPermission;\n","import React, { Suspense, lazy } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport WithPermission from './PresentationalComponents/WithPermission/WithPermission';\n\nconst PermissionRouter = (route) => {\n  const {\n    component: Component,\n    isExact,\n    path,\n    props = {},\n    requiredPermissions,\n  } = route;\n\n  const routeProps = {\n    isExact,\n    path,\n  };\n\n  const componentProps = {\n    ...props,\n    route: { ...route },\n  };\n\n  return (\n    <Route {...routeProps}>\n      <WithPermission requiredPermissions={requiredPermissions}>\n        <Component {...componentProps} />\n      </WithPermission>\n    </Route>\n  );\n};\n\nPermissionRouter.propTypes = {\n  component: PropTypes.node,\n  isExact: PropTypes.bool,\n  path: PropTypes.string,\n  props: PropTypes.object,\n};\n\nconst TasksPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"TasksPage\" */ './SmartComponents/TasksPage/TasksPage'\n  )\n);\n\nconst CompletedTaskDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"CompletedTaskDetails\" */ './SmartComponents/CompletedTaskDetails/CompletedTaskDetails'\n  )\n);\n\nconst tasksRoutes = [\n  {\n    path: '/executed/:id',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: CompletedTaskDetails,\n  },\n  {\n    path: '/available',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 0 },\n  },\n  {\n    path: '/executed',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 1 },\n  },\n  {\n    path: '/',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 0 },\n  },\n];\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <Switch>\n        {tasksRoutes.map(PermissionRouter)}\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import { createContext } from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({ notifications: notificationsReducer });\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n      perPage: 10,\n    }),\n    ['SELECT_ENTITY']: (state, { payload: { selected } }) => {\n      return {\n        ...state,\n        rows: selectRows(state.rows || [], selected),\n      };\n    },\n  });\n"],"names":["props","history","useHistory","chrome","useChrome","useEffect","unregister","getRegistry","register","notifications","notificationsReducer","init","identifyApp","onChromeEvent","on","pckg","event","push","navId","Fragment","childProps","registry","value","Provider","store","getStore","basename","getBaseName","window","location","pathname","WithPermission","children","requiredPermissions","usePermissions","hasAccess","isLoading","serviceName","propTypes","PermissionRouter","route","Component","component","isExact","path","routeProps","componentProps","Route","PropTypes","TasksPage","lazy","tasksRoutes","tab","Routes","Suspense","fallback","Bullseye","Spinner","Switch","map","Redirect","to","RegistryContext","createContext","middleware","promiseMiddleware","filter","item","selectRows","rows","selected","row","includes","id","entitiesReducer","applyReducerHash","total","state","page","perPage","payload"],"sourceRoot":""}