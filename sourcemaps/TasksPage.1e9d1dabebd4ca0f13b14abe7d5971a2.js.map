{"version":3,"file":"js/TasksPage.1667583746965.7078a8c5a0b9cea8d3a8.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/CompletedTasksTable/Columns.js","webpack:///./src/SmartComponents/CompletedTasksTable/Filters.js","webpack:///./src/SmartComponents/CompletedTasksTable/CompletedTasksTable.js","webpack:///./src/SmartComponents/CompletedTasksTable/hooks/useActionResolvers.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  AVAILABLE_TASKS_ROOT,\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_API_ROOT,\n  TASKS_ERROR,\n} from '../../constants';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks?.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          return (\n            <React.Fragment aria-label={task.title} key={task.title}>\n              <CardBuilder>\n                <CardBuilderContent content={task.title} type=\"title\" />\n                <CardBuilderContent\n                  className=\"card-task-description\"\n                  content={task.description}\n                  type=\"body\"\n                />\n                <CardBuilderContent\n                  content={\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <a\n                          href={`${TASKS_API_ROOT}${AVAILABLE_TASKS_ROOT}/${task.slug}/playbook`}\n                        >\n                          Download preview of playbook\n                        </a>\n                      </FlexItem>\n                      <FlexItem>\n                        <RunTaskButton\n                          slug={task.slug}\n                          isFirst\n                          variant=\"primary\"\n                          openTaskModal={openTaskModal}\n                        />\n                      </FlexItem>\n                    </Flex>\n                  }\n                  type=\"footer\"\n                />\n              </CardBuilder>\n              <br />\n            </React.Fragment>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\nimport { isError } from '../completedTaskDetailsHelpers';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const setTasks = (result) => {\n    if (isError(result)) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setAvailableTasks(result.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { renderColumnComponent } from '../../Utilities/helpers';\n\nconst TaskNameCell = ({ id, task_title }, index) => (\n  <Link key={`task-title-${index}`} to={`/executed/${id}`}>\n    {task_title}\n  </Link>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  task_title: propTypes.any,\n  index: propTypes.number,\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'task_title',\n  renderExport: (task) => task.task_title,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'systems_count',\n  renderExport: (task) => task.systems_count,\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'end_time',\n  renderExport: (task) => task.run_date_time,\n  renderFunc: (_, _empty, result) => result.run_date_time,\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  RunDateTimeColumn,\n];\n\nexport default [TaskColumn, SystemsCountColumn, RunDateTimeColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = [\n  {\n    type: conditionalFilterType.text,\n    label: 'Task',\n    filter: (tasks, value) =>\n      tasks.filter((task) =>\n        task.task_title.toLowerCase().includes(value.toLowerCase())\n      ),\n  },\n];\n\nexport const statusFilter = [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'Status',\n    filter: (tasks, value) =>\n      tasks.filter((task) => value.includes(task.status.toLowerCase())),\n    items: [\n      { label: 'Completed', value: 'completed' },\n      { label: 'Running', value: 'running' },\n    ],\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { ExclamationCircleIcon, WrenchIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { nameFilter, statusFilter } from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport {\n  COMPLETED_TASKS_ERROR,\n  COMPLETED_TASKS_TABLE_DEFAULTS,\n  EMPTY_COMPLETED_TASKS_MESSAGE,\n  EMPTY_COMPLETED_TASKS_TITLE,\n  LOADING_COMPLETED_TASKS_TABLE,\n  TASK_LOADING_CONTENT,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport { fetchExecutedTasks } from '../../../api';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport useActionResolver from './hooks/useActionResolvers';\nimport {\n  createNotification,\n  fetchTask,\n  fetchTaskJobs,\n  getSelectedSystems,\n  isError,\n} from '../completedTaskDetailsHelpers';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\n\nconst CompletedTasksTable = () => {\n  const [completedTasks, setCompletedTasks] = useState(\n    LOADING_COMPLETED_TASKS_TABLE\n  );\n  const [completedTaskDetails, setCompletedTaskDetails] =\n    useState(TASK_LOADING_CONTENT);\n  const [tableLoading, setTableLoading] = useState(true);\n  const [error, setError] = useState();\n  const [taskError, setTaskError] = useState();\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const [isRunTaskAgain, setIsRunTaskAgain] = useState(false);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [taskDetails, setTaskDetails] = useState({});\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n\n  const fetchTaskDetails = async (id) => {\n    setTaskError();\n    setRunTaskModalOpened(true);\n    const fetchedTaskDetails = await fetchTask(id, setTaskError);\n\n    if (Object.keys(fetchedTaskDetails).length > 0) {\n      const fetchedTaskJobs = await fetchTaskJobs(\n        fetchedTaskDetails,\n        setTaskError\n      );\n\n      if (fetchedTaskJobs.length) {\n        setSelectedSystems(getSelectedSystems(fetchedTaskJobs));\n        await setCompletedTaskDetails(fetchedTaskDetails);\n      }\n    } else {\n      setRunTaskModalOpened(false);\n      await setCompletedTaskDetails({});\n    }\n  };\n\n  const fetchData = async () => {\n    const path = `?limit=1000&offset=0`;\n    const result = await fetchExecutedTasks(path);\n\n    setTasks(result);\n  };\n\n  const handleCancelOrDeleteTask = async (task) => {\n    await setTaskDetails(task);\n    setIsDeleteCancelModalOpened(true);\n  };\n\n  const actionResolver = useActionResolver(\n    handleCancelOrDeleteTask,\n    fetchTaskDetails\n  );\n\n  const setTasks = async (result) => {\n    if (isError(result)) {\n      createNotification(result);\n      setError(result);\n    } else {\n      result?.data?.map((task) =>\n        task.status === 'Completed'\n          ? (task.run_date_time = renderRunDateTime(task.end_time))\n          : (task.run_date_time = task.status)\n      );\n\n      await setCompletedTasks(result.data);\n      setTableLoading(false);\n    }\n  };\n\n  const refetchData = async () => {\n    setTableLoading(true);\n    await setCompletedTasks(LOADING_COMPLETED_TASKS_TABLE);\n    fetchData();\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(async () => {\n    if (isDelete || isCancel) {\n      await refetchData();\n      setIsDelete(false);\n      setIsCancel(false);\n    } else if (isRunTaskAgain) {\n      await refetchData();\n      setIsRunTaskAgain(false);\n    }\n  }, [isCancel, isDelete, isRunTaskAgain]);\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        description={completedTaskDetails.task_description}\n        error={taskError}\n        isOpen={runTaskModalOpened}\n        selectedSystems={selectedSystems}\n        setIsRunTaskAgain={setIsRunTaskAgain}\n        setModalOpened={setRunTaskModalOpened}\n        slug={completedTaskDetails.task_slug}\n        title={completedTaskDetails.task_title}\n      />\n      <DeleteCancelTaskModal\n        id={taskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={taskDetails.start_time}\n        status={taskDetails.status}\n        title={taskDetails.task_title}\n      />\n      <div aria-label=\"activity\">\n        {error ? (\n          <EmptyStateDisplay\n            icon={ExclamationCircleIcon}\n            color=\"#c9190b\"\n            title={'Activities cannot be displayed'}\n            text={COMPLETED_TASKS_ERROR}\n            error={`Error ${error?.response?.status}: ${error?.message}`}\n          />\n        ) : completedTasks?.length === 0 ? (\n          <EmptyStateDisplay\n            icon={WrenchIcon}\n            color=\"#6a6e73\"\n            title={EMPTY_COMPLETED_TASKS_TITLE}\n            text={EMPTY_COMPLETED_TASKS_MESSAGE}\n          />\n        ) : (\n          <TasksTables\n            label=\"activity-table\"\n            ouiaId=\"activity-table\"\n            columns={columns}\n            items={completedTasks}\n            filters={{\n              filterConfig: [...nameFilter, ...statusFilter],\n            }}\n            options={{\n              ...TASKS_TABLE_DEFAULTS,\n              ...COMPLETED_TASKS_TABLE_DEFAULTS,\n              actionResolver,\n              exportable: {\n                ...TASKS_TABLE_DEFAULTS.exportable,\n                columns: exportableColumns,\n              },\n            }}\n            emptyRows={emptyRows('tasks')}\n            isStickyHeader\n            isTableLoading={tableLoading}\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default CompletedTasksTable;\n","const useActionResolver = (handleTask, fetchTaskDetails) => {\n  const onClick = (funcCall, task) => {\n    funcCall(task);\n  };\n\n  return (row) => [\n    {\n      title: 'Run this task again',\n      onClick: (_event, _index, task) =>\n        onClick(fetchTaskDetails, task.task.title.props.id),\n    },\n    {\n      title: 'Delete',\n      isDisabled: row.task.title.props.status !== 'Completed',\n      /*row.task.title.props.status === 'Completed' ||\n        row.task.title.props.status === 'Cancelled'\n          ? 'Delete'\n          : 'Cancel',*/\n      onClick: (_event, _index, task) => {\n        onClick(handleTask, task.task.title.props);\n      },\n    },\n  ];\n};\n\nexport default useActionResolver;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport CompletedTasksTable from '../../SmartComponents/CompletedTasksTable/CompletedTasksTable';\nimport { fetchAvailableTask } from '../../../api';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nimport './tasks-page.scss';\n\nconst TasksPage = ({ tab }) => {\n  const history = useHistory();\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    if (tab === 0) {\n      history.push('available');\n    }\n  }, []);\n\n  const updateTab = (event, index) => {\n    history.push(index ? 'executed' : 'available');\n    setTab(index);\n  };\n\n  const openTaskModal = async (value, slug) => {\n    const task = await fetchAvailableTask(slug);\n    if (task?.response?.status && task?.response?.status !== 200) {\n      setError(task);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: task.message,\n        dismissable: true,\n        autoDismiss: false,\n      });\n    } else {\n      setActiveTask(task);\n    }\n\n    setRunTaskModalOpened(value);\n  };\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        description={activeTask.description}\n        error={error}\n        isOpen={runTaskModalOpened}\n        selectedSystems={[]}\n        setModalOpened={setRunTaskModalOpened}\n        slug={activeTask.slug}\n        title={activeTask.title}\n      />\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <Main>\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <CompletedTasksTable openTaskModal={openTaskModal} />\n            )}\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","CardBuilderContent","content","findChild","children","component","find","child","props","type","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","AvailableTasksTable","availableTasks","error","openTaskModal","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASKS_ERROR","response","status","message","length","task","description","Flex","direction","default","FlexItem","href","TASKS_API_ROOT","AVAILABLE_TASKS_ROOT","slug","RunTaskButton","isFirst","variant","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","size","SkeletonSize","AvailableTasks","useState","setAvailableTasks","isLoading","setIsLoading","setError","setTasks","result","isError","dispatchNotification","dismissable","autoDismiss","data","useEffect","fetchData","fetchAvailableTasks","TaskNameCell","task_title","Link","to","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","systems_count","RunDateTimeColumn","run_date_time","_","_empty","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","toLowerCase","includes","statusFilter","items","LOADING_COMPLETED_TASKS_TABLE","completedTasks","setCompletedTasks","TASK_LOADING_CONTENT","completedTaskDetails","setCompletedTaskDetails","tableLoading","setTableLoading","taskError","setTaskError","isDelete","setIsDelete","isCancel","setIsCancel","isRunTaskAgain","setIsRunTaskAgain","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","taskDetails","setTaskDetails","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","fetchTaskDetails","fetchTask","fetchedTaskDetails","Object","keys","fetchTaskJobs","fetchedTaskJobs","getSelectedSystems","fetchExecutedTasks","handleCancelOrDeleteTask","actionResolver","handleTask","onClick","funcCall","row","_event","_index","isDisabled","useActionResolver","createNotification","renderRunDateTime","end_time","refetchData","RunTaskModal","task_description","isOpen","setModalOpened","task_slug","DeleteCancelTaskModal","startTime","start_time","COMPLETED_TASKS_ERROR","WrenchIcon","EMPTY_COMPLETED_TASKS_TITLE","EMPTY_COMPLETED_TASKS_MESSAGE","TasksTables","ouiaId","columns","filters","filterConfig","options","TASKS_TABLE_DEFAULTS","COMPLETED_TASKS_TABLE_DEFAULTS","exportable","emptyRows","isStickyHeader","isTableLoading","TasksPage","tab","history","useHistory","setTab","activeTask","setActiveTask","push","fetchAvailableTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Main","Stack","hasGutter","StackItem"],"sourceRoot":""}