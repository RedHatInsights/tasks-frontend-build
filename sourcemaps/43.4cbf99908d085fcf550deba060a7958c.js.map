{"version":3,"file":"js/43.1bb24c85c1e5682d5c24.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/PresentationalComponents/WithPermission/WithPermission.js","webpack:///./src/Routes.js","webpack:///./src/modules/actions.js","webpack:///./src/modules/types.js","webpack:///./src/modules/reducers.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport actions from './modules/actions';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport pckg from '../package.json';\n\nconst App = (props) => {\n  const history = useHistory();\n  const chrome = useChrome();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    let unregister;\n    if (chrome) {\n      const registry = getRegistry();\n      registry.register({ notifications: notificationsReducer });\n      const { identifyApp, on: onChromeEvent } = chrome.init();\n\n      // You can use directly the name of your app\n      identifyApp(pckg.insights.appname);\n      unregister = onChromeEvent('APP_NAVIGATION', (event) =>\n        history.push(`/${event.navId}`)\n      );\n\n      onChromeEvent('GLOBAL_FILTER_UPDATE', ({ data }) => {\n        const [workloads, SID, tags] =\n          chrome?.mapGlobalFilter?.(data, false, true) || [];\n        dispatch(actions.setGlobalFilterTags(tags));\n        dispatch(actions.setGlobalFilterWorkloads(workloads));\n        dispatch(actions.setGlobalFilterSIDs(SID));\n      });\n    }\n    return () => {\n      unregister();\n    };\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst Tasks = () => {\n  const registry = init();\n\n  return (\n    <RegistryContext.Provider value={{ getRegistry: () => registry }}>\n      <Provider store={registry.getStore()}>\n        <Router basename={getBaseName(window.location.pathname)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nexport default Tasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { usePermissions } from '@redhat-cloud-services/frontend-components-utilities/RBACHook';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\n\nconst WithPermission = ({ children, requiredPermissions = [] }) => {\n  const { hasAccess, isLoading } = usePermissions('tasks', requiredPermissions);\n\n  if (!isLoading) {\n    return hasAccess ? children : <NotAuthorized serviceName=\"Tasks\" />;\n  } else {\n    return '';\n  }\n};\n\nWithPermission.propTypes = {\n  children: propTypes.node,\n  requiredPermissions: propTypes.array,\n};\n\nexport default WithPermission;\n","import React, { Suspense, lazy, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport WithPermission from './PresentationalComponents/WithPermission/WithPermission';\nimport axios from 'axios';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nconst PermissionRouter = (route) => {\n  const {\n    component: Component,\n    isExact,\n    path,\n    props = {},\n    requiredPermissions,\n  } = route;\n\n  const routeProps = {\n    isExact,\n    path,\n  };\n\n  const componentProps = {\n    ...props,\n    route: { ...route },\n  };\n\n  return (\n    <Route {...routeProps}>\n      <WithPermission requiredPermissions={requiredPermissions}>\n        <Component {...componentProps} />\n      </WithPermission>\n    </Route>\n  );\n};\n\nPermissionRouter.propTypes = {\n  component: PropTypes.node,\n  isExact: PropTypes.bool,\n  path: PropTypes.string,\n  props: PropTypes.object,\n};\n\nconst TasksPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"TasksPage\" */ './SmartComponents/TasksPage/TasksPage'\n  )\n);\n\nconst CompletedTaskDetails = lazy(() =>\n  import(\n    /* webpackChunkName: \"CompletedTaskDetails\" */ './SmartComponents/CompletedTaskDetails/CompletedTaskDetails'\n  )\n);\n\nconst tasksRoutes = [\n  {\n    path: '/executed/:id',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: CompletedTaskDetails,\n  },\n  {\n    path: '/available',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 0 },\n  },\n  {\n    path: '/executed',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 1 },\n  },\n  {\n    path: '/',\n    isExact: true,\n    requiredPermissions: ['tasks:*:*'],\n    component: TasksPage,\n    props: { tab: 0 },\n  },\n];\n\nconst INVENTORY_TOTAL_FETCH_URL = '/api/inventory/v1/hosts';\n\n/**\n * the Switch component changes routes depending on the path.\n *\n * Route properties:\n *      exact - path must match exactly,\n *      path - https://prod.foo.redhat.com:1337/insights/advisor/rules\n *      component - component to be rendered when a route has been chosen.\n */\nexport const Routes = () => {\n  const [hasSystems, setHasSystems] = useState(true);\n  useEffect(() => {\n    try {\n      axios\n        .get(`${INVENTORY_TOTAL_FETCH_URL}?page=1&per_page=1`)\n        .then(({ data }) => {\n          setHasSystems(data.total > 0);\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  }, [hasSystems]);\n\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      {!hasSystems ? (\n        <AsynComponent\n          appName=\"dashboard\"\n          module=\"./AppZeroState\"\n          scope=\"dashboard\"\n          ErrorComponent={<ErrorState />}\n          app=\"Tasks\"\n        />\n      ) : (\n        <Switch>\n          {tasksRoutes.map(PermissionRouter)}\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      )}\n    </Suspense>\n  );\n};\n","import types from './types';\n\nfunction setGlobalFilterTags(tags = []) {\n  return {\n    type: types.SET_GLOBAL_FILTER_TAGS,\n    payload: tags,\n  };\n}\n\nfunction setGlobalFilterWorkloads(workloads = []) {\n  return {\n    type: types.SET_GLOBAL_FILTER_WORKLOADS,\n    payload: workloads,\n  };\n}\n\nfunction setGlobalFilterSIDs(SIDs = []) {\n  return {\n    type: types.SET_GLOBAL_FILTER_SIDS,\n    payload: SIDs,\n  };\n}\n\nexport default {\n  setGlobalFilterTags,\n  setGlobalFilterWorkloads,\n  setGlobalFilterSIDs,\n};\n","const SET_GLOBAL_FILTER_TAGS = 'SET_GLOBAL_FILTER_TAGS';\nconst SET_GLOBAL_FILTER_WORKLOADS = 'SET_GLOBAL_FILTER_WORKLOADS';\nconst SET_GLOBAL_FILTER_SIDS = 'SET_GLOBAL_FILTER_SIDS';\n\nexport default {\n  SET_GLOBAL_FILTER_TAGS,\n  SET_GLOBAL_FILTER_WORKLOADS,\n  SET_GLOBAL_FILTER_SIDS,\n};\n","import types from './types';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nexport const globalFilterReducer = applyReducerHash({\n  [types.SET_GLOBAL_FILTER_TAGS]: (state = {}, action) => ({\n    ...state,\n    tagsFilter: action.payload,\n  }),\n  [types.SET_GLOBAL_FILTER_WORKLOADS]: (state = {}, action) => ({\n    ...state,\n    workloadsFilter: action.payload,\n  }),\n  [types.SET_GLOBAL_FILTER_SIDS]: (state = {}, action) => ({\n    ...state,\n    sidsFilter: action.payload,\n  }),\n});\n","import { createContext } from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { globalFilterReducer } from '../modules/reducers';\n\nlet registry;\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    ...middleware.filter((item) => typeof item !== 'undefined'),\n  ]);\n\n  registry.register({\n    notifications: notificationsReducer,\n    globalFilterState: globalFilterReducer,\n  });\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n      perPage: 10,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => {\n      return {\n        ...state,\n        rows: selectRows(state.rows || [], selected),\n      };\n    },\n  });\n"],"names":["props","history","useHistory","chrome","useChrome","dispatch","useDispatch","useEffect","unregister","getRegistry","register","notifications","notificationsReducer","init","identifyApp","onChromeEvent","on","pckg","event","push","navId","data","mapGlobalFilter","workloads","SID","tags","actions","Fragment","childProps","registry","value","Provider","store","getStore","basename","getBaseName","window","location","pathname","WithPermission","children","requiredPermissions","usePermissions","hasAccess","isLoading","serviceName","propTypes","PermissionRouter","route","Component","component","isExact","path","routeProps","componentProps","Route","PropTypes","TasksPage","lazy","tasksRoutes","tab","Routes","useState","hasSystems","setHasSystems","axios","then","total","e","console","log","Suspense","fallback","Bullseye","Spinner","Switch","map","Redirect","to","appName","module","scope","ErrorComponent","app","setGlobalFilterTags","type","types","payload","setGlobalFilterWorkloads","setGlobalFilterSIDs","SIDs","SET_GLOBAL_FILTER_TAGS","SET_GLOBAL_FILTER_WORKLOADS","SET_GLOBAL_FILTER_SIDS","globalFilterReducer","applyReducerHash","action","tagsFilter","workloadsFilter","sidsFilter","RegistryContext","createContext","middleware","promiseMiddleware","filter","item","globalFilterState","selectRows","rows","selected","row","includes","id","entitiesReducer","state","page","perPage"],"sourceRoot":""}