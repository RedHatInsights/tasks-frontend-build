{"version":3,"file":"js/CompletedTaskDetails.1655934395935.98dbfaf9803c35884971.js","mappings":"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","sources":["webpack:///./src/SmartComponents/CompletedTaskDetails/Columns.js","webpack:///./src/SmartComponents/CompletedTaskDetails/Filters.js","webpack:///./src/SmartComponents/CompletedTaskDetails/__tests__/__fixtures__/completedTasksDetails.fixtures.js","webpack:///./src/SmartComponents/CompletedTaskDetails/CompletedTaskDetails.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { renderColumnComponent } from '../../Utilities/helpers';\n\nconst SystemNameCell = ({ /*id,*/ display_name }, index) => (\n  <Link\n    key={`system-title-${index}`}\n    //to={`/executed/${id}`}\n    to={`/`}\n  >\n    {display_name}\n  </Link>\n);\n\nSystemNameCell.propTypes = {\n  id: propTypes.string,\n  display_name: propTypes.string,\n};\n\nexport const SystemColumn = {\n  title: 'System name',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'display_name',\n  renderExport: (job) => job.display_name,\n  renderFunc: renderColumnComponent(SystemNameCell),\n};\n\nexport const ResultColumn = {\n  title: 'Result',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'status',\n  renderExport: (job) => job.status,\n};\n\nexport const MessageColumn = {\n  title: 'Message',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'message',\n  renderExport: (job) => job.message,\n};\n\nexport const exportableColumns = [SystemColumn, ResultColumn, MessageColumn];\n\nexport default [SystemColumn, ResultColumn, MessageColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const systemFilter = {\n  type: conditionalFilterType.text,\n  label: 'System',\n  filter: (jobs, value) =>\n    jobs.filter((job) =>\n      job.display_name.toLowerCase().includes(value.toLowerCase())\n    ),\n};\n","export const log4j_task = {\n  id: 42,\n  task_title: 'Log4J Detection',\n  description:\n    'Uses the insights-client to determine if systems are affected by the LogShell vulnerability. Resource intensive scan',\n  task_url: 'https://console.redhat.com/api/tasks/v1/task/log4J',\n  start: '2022-04-21T10:10:00',\n  end: null,\n  initiated_by: 'UserX',\n  status: 'running',\n  system_count: 10,\n  jobs: [\n    {\n      display_name: 'host01.example.com',\n      host_id: '00112233-4455-6677-8899aabbccddeeff',\n      status: 'completed',\n      //results: {'JSON structure'}\n    },\n  ],\n};\n\nexport const upgrade_leap_task = {\n  id: 43,\n  task_title: 'Upgrade RHEL version with LEAP tool',\n  description:\n    'Uses the insights-client to determine if RHEL version can be upgraded with LEAP tool. Resource intensive scan',\n  task_url: 'https://console.redhat.com/api/tasks/v1/task/leap',\n  start: '2022-04-21T10:10:00',\n  end: '2022-04-23T11:10:00',\n  initiated_by: 'Michael',\n  status: 'running',\n  system_count: 5,\n  jobs: [\n    {\n      display_name: 'host01.example.com',\n      host_id: '00112233-4455-6677-8899aabbccddeeff',\n      status: 'completed',\n      //results: {'JSON structure'}\n    },\n  ],\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Card,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport columns, { exportableColumns } from './Columns';\n//import { fetchExecutedTask, fetchExecutedTaskJobs } from '../../../api';\nimport { completedTaskJobsItems } from '../../Utilities/hooks/useTableTools/Components/__tests__/TasksTable.fixtures';\nimport * as Filters from './Filters';\nimport {\n  COMPLETED_INFO_PANEL,\n  COMPLETED_INFO_PANEL_FLEX_PROPS,\n  COMPLETED_INFO_BUTTONS,\n  COMPLETED_INFO_BUTTONS_FLEX_PROPS,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport {\n  log4j_task,\n  upgrade_leap_task,\n} from './__tests__/__fixtures__/completedTasksDetails.fixtures';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\n\nconst CompletedTaskDetails = () => {\n  const { id } = useParams();\n  const filters = Object.values(Filters);\n  //const filters = Object.values(Filters);\n  const [completedTaskDetails, setCompletedTaskDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = () => {\n      setIsLoading(true);\n      let taskDetails;\n      //const taskDetails = fetchExecutedTask(id);\n      //const taskJobs = fetchExecutedTaskJobs(id);\n      if (id == 1) {\n        taskDetails = log4j_task;\n      } else {\n        taskDetails = upgrade_leap_task;\n      }\n      taskDetails.messages_count = completedTaskJobsItems.filter((item) => {\n        return item.message !== 'No vulnerability found.';\n      }).length;\n\n      setIsLoading(false);\n      setCompletedTaskDetails(taskDetails);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {isLoading ? (\n        <div>Loading</div>\n      ) : (\n        <React.Fragment>\n          <PageHeader>\n            <Breadcrumb ouiaId=\"completed-tasks-details-breadcrumb\">\n              <BreadcrumbItem to=\"/beta/insights/tasks/executed\">\n                Tasks\n              </BreadcrumbItem>\n              <BreadcrumbItem isActive>\n                {completedTaskDetails.task_title}\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <Flex direction={{ default: 'column', md: 'row' }}>\n              <Flex\n                direction={{ default: 'column' }}\n                flex={{ default: 'flex_1' }}\n              >\n                <FlexItem>\n                  <PageHeaderTitle title={completedTaskDetails.task_title} />\n                </FlexItem>\n                <FlexItem>{completedTaskDetails.description}</FlexItem>\n              </Flex>\n              <FlexibleFlex\n                data={completedTaskDetails}\n                flexContents={COMPLETED_INFO_BUTTONS}\n                flexProps={COMPLETED_INFO_BUTTONS_FLEX_PROPS}\n              />\n            </Flex>\n          </PageHeader>\n          <Main>\n            <Card>\n              <Flex\n                className=\"completed-task-details-info-border\"\n                justifyContent={{ default: 'justifyContentSpaceBetween' }}\n                direction={{ default: 'column', md: 'row' }}\n              >\n                <FlexibleFlex\n                  data={completedTaskDetails}\n                  flexContents={COMPLETED_INFO_PANEL}\n                  flexProps={COMPLETED_INFO_PANEL_FLEX_PROPS}\n                />\n              </Flex>\n            </Card>\n            <br />\n            <Card>\n              <TasksTables\n                label={`${completedTaskDetails.id}-completed-jobs`}\n                ouiaId={`${completedTaskDetails.id}-completed-jobs-table`}\n                columns={columns}\n                items={completedTaskJobsItems}\n                filters={{\n                  filterConfig: filters,\n                }}\n                options={{\n                  ...TASKS_TABLE_DEFAULTS,\n                  exportable: {\n                    ...TASKS_TABLE_DEFAULTS.exportable,\n                    columns: exportableColumns,\n                  },\n                }}\n                //items={completedTasks}\n                //emptyRows={emptyRows}\n                isStickyHeader\n              />\n            </Card>\n          </Main>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default CompletedTaskDetails;\n"],"names":["SystemNameCell","index","display_name","Link","key","to","propTypes","id","SystemColumn","title","props","width","sortByProp","renderExport","job","renderFunc","renderColumnComponent","ResultColumn","status","MessageColumn","message","exportableColumns","systemFilter","type","conditionalFilterType","label","filter","jobs","value","toLowerCase","includes","log4j_task","task_title","description","task_url","start","end","initiated_by","system_count","host_id","upgrade_leap_task","useParams","filters","Object","values","Filters","useState","completedTaskDetails","setCompletedTaskDetails","isLoading","setIsLoading","useEffect","taskDetails","messages_count","completedTaskJobsItems","item","length","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","isActive","Flex","direction","default","md","flex","FlexItem","PageHeaderTitle","FlexibleFlex","data","flexContents","COMPLETED_INFO_BUTTONS","flexProps","COMPLETED_INFO_BUTTONS_FLEX_PROPS","Main","Card","className","justifyContent","COMPLETED_INFO_PANEL","COMPLETED_INFO_PANEL_FLEX_PROPS","TasksTables","columns","items","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","isStickyHeader"],"sourceRoot":""}