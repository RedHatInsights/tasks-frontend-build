{"version":3,"file":"js/CompletedTaskDetails.1658320312392.211fed4744f9f701c18a.js","mappings":"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","sources":["webpack:///./src/SmartComponents/CompletedTaskDetails/Columns.js","webpack:///./src/SmartComponents/CompletedTaskDetails/Filters.js","webpack:///./src/SmartComponents/CompletedTaskDetails/CompletedTaskDetails.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { renderColumnComponent } from '../../Utilities/helpers';\n\nconst SystemNameCell = ({ /*id,*/ display_name }, index) => (\n  <Link\n    key={`system-title-${index}`}\n    //to={`/executed/${id}`}\n    to={`/`}\n  >\n    {display_name}\n  </Link>\n);\n\nSystemNameCell.propTypes = {\n  id: propTypes.string,\n  display_name: propTypes.node,\n};\n\nexport const SystemColumn = {\n  title: 'System name',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'display_name',\n  renderExport: (job) => job.display_name,\n  renderFunc: renderColumnComponent(SystemNameCell),\n};\n\nexport const ResultColumn = {\n  title: 'Result',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'status',\n  renderExport: (job) => job.status,\n};\n\nexport const MessageColumn = {\n  title: 'Message',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'message',\n  renderExport: (job) => job.message,\n};\n\nexport const exportableColumns = [SystemColumn, ResultColumn, MessageColumn];\n\nexport default [SystemColumn, ResultColumn, MessageColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const systemFilter = {\n  type: conditionalFilterType.text,\n  label: 'System',\n  filter: (jobs, value) =>\n    jobs.filter((job) =>\n      job.display_name.toLowerCase().includes(value.toLowerCase())\n    ),\n};\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Card,\n  Flex,\n  FlexItem,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport columns, { exportableColumns } from './Columns';\nimport { fetchExecutedTask, fetchExecutedTaskJobs } from '../../../api';\nimport * as Filters from './Filters';\nimport {\n  COMPLETED_INFO_PANEL,\n  COMPLETED_INFO_PANEL_FLEX_PROPS,\n  COMPLETED_INFO_BUTTONS,\n  COMPLETED_INFO_BUTTONS_FLEX_PROPS,\n  LOADING_INFO_PANEL,\n  LOADING_JOBS_TABLE,\n  TASK_ERROR,\n  TASKS_TABLE_DEFAULTS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport DeleteCancelTaskModal from '../../PresentationalComponents/DeleteCancelTaskModal/DeleteCancelTaskModal';\nimport { emptyRows } from '../../PresentationalComponents/NoResultsTable/NoResultsTable';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nconst CompletedTaskDetails = () => {\n  const { id } = useParams();\n  const filters = Object.values(Filters);\n  const [completedTaskDetails, setCompletedTaskDetails] =\n    useState(LOADING_INFO_PANEL);\n  const [completedTaskJobs, setCompletedTaskJobs] =\n    useState(LOADING_JOBS_TABLE);\n  const [error, setError] = useState();\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [isDeleteCancelModalOpened, setIsDeleteCancelModalOpened] =\n    useState(false);\n  const [isDelete, setIsDelete] = useState(false);\n  const [isCancel, setIsCancel] = useState(false);\n  const history = useHistory();\n\n  const getSelectedSystems = () => {\n    return completedTaskJobs.map((job) => job.system);\n  };\n\n  const fetchData = async () => {\n    let taskDetails = await fetchExecutedTask(id);\n\n    if (isError(taskDetails)) {\n      setNotification(taskDetails);\n      setError(taskDetails);\n    } else {\n      const taskJobs = await fetchExecutedTaskJobs(id);\n\n      if (isError(taskJobs)) {\n        setNotification(taskJobs);\n        setError(taskJobs);\n      } else {\n        taskDetails.messages_count = taskJobs.data.filter((item) => {\n          return item.results.message !== 'No vulnerability found.';\n        }).length;\n        taskDetails.system_count = taskJobs.data.length;\n        await setCompletedTaskDetails(taskDetails);\n        await setCompletedTaskJobs(taskJobs.data);\n      }\n    }\n  };\n\n  const isError = (result) => {\n    return result?.response?.status && result?.response?.status !== 200;\n  };\n\n  const setNotification = (result) => {\n    dispatchNotification({\n      variant: 'danger',\n      title: 'Error',\n      description: result.message,\n      dismissable: true,\n      autoDismiss: false,\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedSystems(getSelectedSystems());\n  }, [completedTaskJobs]);\n\n  useEffect(async () => {\n    if (isDelete) {\n      history.push('/executed');\n      setIsDelete(false);\n    }\n\n    if (isCancel) {\n      await setCompletedTaskDetails(LOADING_INFO_PANEL);\n      await setCompletedTaskJobs(LOADING_JOBS_TABLE);\n      await fetchData();\n      setIsCancel(false);\n    }\n  }, [isCancel, isDelete]);\n\n  return (\n    <div>\n      <RunTaskModal\n        description={completedTaskDetails.description}\n        error={error}\n        isOpen={runTaskModalOpened}\n        selectedSystems={selectedSystems}\n        setModalOpened={setRunTaskModalOpened}\n        slug={completedTaskDetails.task_slug}\n        title={completedTaskDetails.task_title}\n      />\n      <DeleteCancelTaskModal\n        id={completedTaskDetails.id}\n        isOpen={isDeleteCancelModalOpened}\n        setIsCancel={setIsCancel}\n        setIsDelete={setIsDelete}\n        setModalOpened={setIsDeleteCancelModalOpened}\n        startTime={completedTaskDetails.start_time}\n        status={completedTaskDetails.status}\n        title={completedTaskDetails.task_title}\n      />\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Task cannot be displayed'}\n          text={TASK_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : (\n        <React.Fragment>\n          <PageHeader>\n            <Breadcrumb ouiaId=\"completed-tasks-details-breadcrumb\">\n              <BreadcrumbItem to=\"/beta/insights/tasks/executed\">\n                Tasks\n              </BreadcrumbItem>\n              <BreadcrumbItem isActive>\n                {completedTaskDetails.task_title}\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <Flex direction={{ default: 'column', md: 'row' }}>\n              <Flex\n                direction={{ default: 'column' }}\n                flex={{ default: 'flex_1' }}\n              >\n                <FlexItem>\n                  <PageHeaderTitle title={completedTaskDetails.task_title} />\n                </FlexItem>\n                <FlexItem>{completedTaskDetails.description}</FlexItem>\n              </Flex>\n              <FlexibleFlex\n                data={completedTaskDetails}\n                flexContents={COMPLETED_INFO_BUTTONS(\n                  completedTaskDetails.task_slug,\n                  setRunTaskModalOpened,\n                  //completedTaskDetails.status,\n                  setIsDeleteCancelModalOpened\n                )}\n                flexProps={COMPLETED_INFO_BUTTONS_FLEX_PROPS}\n              />\n            </Flex>\n          </PageHeader>\n          <Main>\n            <Card>\n              <Flex\n                className=\"completed-task-details-info-border\"\n                justifyContent={{ default: 'justifyContentSpaceBetween' }}\n                direction={{ default: 'column', md: 'row' }}\n              >\n                <FlexibleFlex\n                  data={completedTaskDetails}\n                  flexContents={COMPLETED_INFO_PANEL}\n                  flexProps={COMPLETED_INFO_PANEL_FLEX_PROPS}\n                />\n              </Flex>\n            </Card>\n            <br />\n            <Card>\n              <TasksTables\n                label={`${completedTaskDetails.id}-completed-jobs`}\n                ouiaId={`${completedTaskDetails.id}-completed-jobs-table`}\n                columns={columns}\n                items={completedTaskJobs}\n                filters={{\n                  filterConfig: filters,\n                }}\n                options={{\n                  ...TASKS_TABLE_DEFAULTS,\n                  exportable: {\n                    ...TASKS_TABLE_DEFAULTS.exportable,\n                    columns: exportableColumns,\n                  },\n                }}\n                emptyRows={emptyRows('jobs')}\n                isStickyHeader\n              />\n            </Card>\n          </Main>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default CompletedTaskDetails;\n"],"names":["SystemNameCell","index","display_name","Link","key","to","propTypes","id","SystemColumn","title","props","width","sortByProp","renderExport","job","renderFunc","renderColumnComponent","ResultColumn","status","MessageColumn","message","exportableColumns","systemFilter","type","conditionalFilterType","label","filter","jobs","value","toLowerCase","includes","useParams","filters","Object","values","Filters","useState","LOADING_INFO_PANEL","completedTaskDetails","setCompletedTaskDetails","LOADING_JOBS_TABLE","completedTaskJobs","setCompletedTaskJobs","error","setError","runTaskModalOpened","setRunTaskModalOpened","selectedSystems","setSelectedSystems","isDeleteCancelModalOpened","setIsDeleteCancelModalOpened","isDelete","setIsDelete","isCancel","setIsCancel","history","useHistory","fetchData","fetchExecutedTask","taskDetails","isError","setNotification","fetchExecutedTaskJobs","taskJobs","messages_count","data","item","results","length","system_count","result","response","dispatchNotification","variant","description","dismissable","autoDismiss","useEffect","map","system","push","RunTaskModal","isOpen","setModalOpened","slug","task_slug","task_title","DeleteCancelTaskModal","startTime","start_time","EmptyStateDisplay","icon","ExclamationCircleIcon","color","text","TASK_ERROR","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","isActive","Flex","direction","default","md","flex","FlexItem","PageHeaderTitle","FlexibleFlex","flexContents","COMPLETED_INFO_BUTTONS","flexProps","COMPLETED_INFO_BUTTONS_FLEX_PROPS","Main","Card","className","justifyContent","COMPLETED_INFO_PANEL","COMPLETED_INFO_PANEL_FLEX_PROPS","TasksTables","columns","items","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","emptyRows","isStickyHeader"],"sourceRoot":""}