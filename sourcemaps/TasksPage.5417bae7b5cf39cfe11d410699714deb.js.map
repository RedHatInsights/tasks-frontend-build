{"version":3,"file":"js/TasksPage.1655934395935.98dbfaf9803c35884971.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack:///./src/PresentationalComponents/TasksTabs/TasksTabs.js","webpack:///./src/SmartComponents/SystemTable/constants.js","webpack:///./api.js","webpack:///./src/SmartComponents/SystemTable/helpers.js","webpack:///./src/SmartComponents/SystemTable/hooks.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/SmartComponents/SystemTable/SystemTable.js","webpack:///./src/SmartComponents/RunTaskModal/RunTaskModal.js","webpack:///./src/PresentationalComponents/CardBuilder/CardBuilder.js","webpack:///./src/PresentationalComponents/RunTaskButton/RunTaskButton.js","webpack:///./src/PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasksTable.js","webpack:///./src/SmartComponents/AvailableTasks/AvailableTasks.js","webpack:///./src/SmartComponents/CompletedTasksTable/Columns.js","webpack:///./src/SmartComponents/CompletedTasksTable/Filters.js","webpack:///./src/SmartComponents/CompletedTasksTable/CompletedTasksTable.js","webpack:///./src/SmartComponents/TasksPage/TasksPage.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nconst TasksTabs = ({ className, tabIndex, tabsList, updateTab }) => {\n  return (\n    <Tabs className={className} activeKey={tabIndex} onSelect={updateTab}>\n      {tabsList.map((tabName, index) => (\n        <Tab\n          id={`tabs-page-${index}`}\n          key={`tabs-page-${index}`}\n          eventKey={index}\n          title={<TabTitleText>{tabName}</TabTitleText>}\n        />\n      ))}\n    </Tabs>\n  );\n};\n\nTasksTabs.propTypes = {\n  className: PropTypes.string,\n  tabIndex: PropTypes.number,\n  tabsList: PropTypes.array,\n  updateTab: PropTypes.func,\n};\n\nexport default TasksTabs;\n","import { entitiesReducer } from '../../store/index';\n\nexport const systemColumns = [\n  {\n    key: 'display_name',\n    sortKey: 'display_name',\n    props: { width: 20 },\n    title: 'Name',\n  },\n  'tags',\n  {\n    key: 'os_version',\n    sortKey: 'os_version',\n    props: { width: 10 },\n    title: 'OS',\n  },\n  'updated',\n];\n\nexport const defaultOnLoad = (columns, getRegistry) => {\n  return ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns), {\n        page: 1,\n        perPage: 10,\n        sortBy: {\n          key: 'last_updated',\n          direction: 'desc',\n        },\n      }),\n    });\n};\n","import axios from 'axios';\nimport {\n  TASKS_API_ROOT,\n  AVAILABLE_TASKS_ROOT,\n  EXECUTED_TASKS_ROOT,\n  SYSTEMS_ROOT,\n} from './src/constants';\n\nconst getTasks = async (path) => {\n  let response;\n\n  const request = await axios\n    .get(TASKS_API_ROOT.concat(path))\n    .catch(function (error) {\n      return error;\n    });\n\n  if (request.status === 200) {\n    response = request.data.data;\n  } else {\n    response = request;\n  }\n\n  return response;\n};\n\nexport const fetchAvailableTasks = () => {\n  return getTasks(AVAILABLE_TASKS_ROOT);\n};\n\nexport const fetchExecutedTasks = () => {\n  return getTasks(EXECUTED_TASKS_ROOT);\n};\n\nexport const fetchExecutedTask = (path) => {\n  return getTasks(EXECUTED_TASKS_ROOT.concat(path));\n};\n\nexport const fetchExecutedTaskJobs = (id) => {\n  let idPath = `/${id}`;\n  return fetchExecutedTask(idPath.concat('/jobs'));\n};\n\nexport const fetchSystems = (path) => {\n  return getTasks(SYSTEMS_ROOT.concat(path));\n};\n","const buildSortString = (orderBy, orderDirection) => {\n  let sortString = orderBy ? '&sort=' : '';\n  let direction = '';\n  if (orderDirection === 'DESC') {\n    direction = '-';\n  }\n  let order = orderBy === 'updated' ? 'last_seen' : orderBy;\n\n  return `${sortString}${direction}${order}`;\n};\n\nconst buildFilterString = (filters) => {\n  let displayNameFilter = filters.hostnameOrId\n    ? `&display_name=${filters.hostnameOrId}`\n    : '';\n\n  return `${displayNameFilter}`;\n};\n\nexport const buildFilterSortString = (\n  limit,\n  offset,\n  orderBy,\n  orderDirection,\n  filters\n) => {\n  let limitOffsetString = `limit=${limit}&offset=${offset}`;\n  let sortString = buildSortString(orderBy, orderDirection);\n  let filterString = buildFilterString(filters);\n  return `?${limitOffsetString}${sortString}${filterString}`;\n};\n","import { fetchSystems } from '../../../api';\nimport { buildFilterSortString } from './helpers';\n\nexport const useGetEntities = (selectedIds) => {\n  return async (\n    _items,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const limit = perPage;\n    const offset = page * perPage - perPage;\n    const filterSortString = buildFilterSortString(\n      limit,\n      offset,\n      orderBy,\n      orderDirection,\n      filters\n    );\n    const fetchedEntities = await fetchSystems(filterSortString);\n\n    const {\n      data,\n      meta: { count },\n    } = fetchedEntities || {};\n\n    return {\n      results: data.map((entity) => ({\n        ...entity,\n        selected: (selectedIds || []).map((id) => id).includes(entity.id),\n      })),\n      page,\n      perPage,\n      orderBy,\n      orderDirection,\n      total: count,\n    };\n  };\n};\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Unable to load inventory component\"),\n        React.createElement(\"h2\", null,\n            \"Failed to load \",\n            component),\n        React.createElement(\"code\", null, \"More info can be found in browser console output.\")));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React, { useContext, useEffect, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport { defaultOnLoad, systemColumns } from './constants';\nimport { useGetEntities } from './hooks';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { Spinner } from '@patternfly/react-core';\nimport { RegistryContext } from '../../store';\nimport { useDispatch } from 'react-redux';\n\nconst SystemTable = ({ selectedIds, selectIds }) => {\n  const inventory = useRef(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: 'INVENTORY_INIT' });\n    dispatch({ type: 'RESET_PAGE' });\n    inventory?.current?.onRefreshData();\n  }, [dispatch]);\n\n  const mergedColumns = (defaultColumns) =>\n    systemColumns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <InventoryTable\n      isFullView\n      autoRefresh\n      initialLoading\n      showTags\n      hideFilters={{\n        all: true,\n        //name: false,\n        //tags: false,\n        //operatingSystem: false,\n      }}\n      columns={mergedColumns}\n      ref={inventory}\n      fallback={<Spinner />}\n      onLoad={defaultOnLoad(systemColumns, getRegistry)}\n      getEntities={useGetEntities(selectedIds)}\n      tableProps={{\n        canSelectAll: false,\n        isStickyHeader: true,\n        onSelect: selectIds,\n      }}\n    />\n  );\n};\n\nSystemTable.propTypes = {\n  selectedIds: propTypes.array,\n  selectIds: propTypes.func,\n};\n\nexport default SystemTable;\n","import React, { useEffect, useState } from 'react';\nimport { Flex, FlexItem, Modal } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport SystemTable from '../SystemTable/SystemTable';\nimport { useDispatch } from 'react-redux';\n\nconst RunTaskModal = ({ task, isOpen, setModalOpened }) => {\n  const [selectedIds, setSelectedIds] = useState([]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setSelectedIds([]);\n  }, [task]);\n\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITY',\n      payload: {\n        selected: selectedIds,\n      },\n    });\n  }, [selectedIds]);\n\n  const selectIds = (_event, _isSelected, _index, entity) => {\n    let newSelectedIds = [...selectedIds];\n\n    !newSelectedIds.includes(entity.id)\n      ? newSelectedIds.push(entity.id)\n      : newSelectedIds.splice(newSelectedIds.indexOf(entity.id), 1);\n\n    setSelectedIds(newSelectedIds);\n  };\n\n  return (\n    <Modal\n      aria-label=\"run-task-modal\"\n      title={task.title}\n      isOpen={isOpen}\n      onClose={() => setModalOpened(false)}\n      width={'70%'}\n    >\n      <React.Fragment>\n        <Flex>\n          <FlexItem>\n            <b>Task description</b>\n          </FlexItem>\n        </Flex>\n        <Flex style={{ paddingBottom: '8px' }}>\n          <FlexItem>{task.description}</FlexItem>\n        </Flex>\n        <Flex>\n          <FlexItem>\n            <a href=\"#\">Download preview of playbook</a>\n          </FlexItem>\n        </Flex>\n        <br />\n        <b>Systems to run tasks on</b>\n        <SystemTable selectedIds={selectedIds} selectIds={selectIds} />\n      </React.Fragment>\n    </Modal>\n  );\n};\n\nRunTaskModal.propTypes = {\n  isOpen: propTypes.bool,\n  setModalOpened: propTypes.func,\n  task: propTypes.object,\n};\n\nexport default RunTaskModal;\n","import React from 'react';\nimport { Card, CardBody, CardFooter, CardTitle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const CardBuilderContent = ({ content }) => {\n  return content;\n};\n\nconst findChild = (children, component) => {\n  return children.find((child) => child.props.type === component);\n};\n\nconst CardBuilder = ({ children, cardClass }) => {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  return (\n    <Card className={cardClass}>\n      <CardTitle className={findChild(children, 'title').props.className}>\n        {findChild(children, 'title')}\n      </CardTitle>\n      <CardBody className={findChild(children, 'body').props.className}>\n        {findChild(children, 'body')}\n      </CardBody>\n      <CardFooter className={findChild(children, 'footer').props.className}>\n        {findChild(children, 'footer')}\n      </CardFooter>\n    </Card>\n  );\n};\n\nCardBuilder.propTypes = {\n  children: propTypes.any,\n  cardClass: propTypes.string,\n};\n\nexport default CardBuilder;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst RunTaskButton = ({\n  classname,\n  task,\n  isFirst,\n  openTaskModal,\n  variant,\n}) => {\n  return (\n    <Button\n      aria-label={`${task.slug}-run-task-button`}\n      className={classname}\n      variant={variant}\n      onClick={() => openTaskModal(task)}\n    >\n      {isFirst ? 'Run task' : 'Run task again'}\n    </Button>\n  );\n};\n\nRunTaskButton.propTypes = {\n  classname: propTypes.string,\n  task: propTypes.object,\n  isFirst: propTypes.bool,\n  openTaskModal: propTypes.func,\n  variant: propTypes.string,\n};\n\nexport default RunTaskButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nexport const EmptyStateDisplay = ({\n  button,\n  color,\n  error,\n  icon,\n  isSmall,\n  text,\n  title,\n}) => {\n  return (\n    <EmptyState\n      variant={isSmall ? EmptyStateVariant.small : EmptyStateVariant.large}\n    >\n      {icon ? (\n        <EmptyStateIcon\n          icon={icon}\n          color={color ? color : null}\n          className={isSmall ? 'small-empty-state-icon' : null}\n        />\n      ) : null}\n      <br></br>\n      <Title headingLevel={isSmall ? 'h5' : 'h1'} size={isSmall ? 'md' : 'lg'}>\n        {title}\n      </Title>\n      <EmptyStateBody>\n        {text\n          ? text.map((line, index) => (\n              <React.Fragment key={`line-${index}`}>\n                {line}\n                <br />\n              </React.Fragment>\n            ))\n          : null}\n        {error ? error : null}\n      </EmptyStateBody>\n      {button}\n    </EmptyState>\n  );\n};\n\nEmptyStateDisplay.propTypes = {\n  button: PropTypes.object,\n  color: PropTypes.string,\n  error: PropTypes.string,\n  icon: PropTypes.any,\n  isSmall: PropTypes.bool,\n  text: PropTypes.array,\n  title: PropTypes.string,\n};\n\nexport default EmptyStateDisplay;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport RunTaskButton from '../../PresentationalComponents/RunTaskButton/RunTaskButton';\nimport EmptyStateDisplay from '../../PresentationalComponents/EmptyStateDisplay/EmptyStateDisplay';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  EMPTY_TASKS_MESSAGE,\n  EMPTY_TASKS_TITLE,\n  TASKS_ERROR,\n} from '../../constants';\n\nconst AvailableTasksTable = ({ availableTasks, error, openTaskModal }) => {\n  return (\n    <div aria-label=\"available-tasks-table\">\n      {error ? (\n        <EmptyStateDisplay\n          icon={ExclamationCircleIcon}\n          color=\"#c9190b\"\n          title={'Available tasks cannot be displayed'}\n          text={TASKS_ERROR}\n          error={`Error ${error?.response?.status}: ${error?.message}`}\n        />\n      ) : !availableTasks.length ? (\n        <EmptyStateDisplay\n          title={EMPTY_TASKS_TITLE}\n          text={EMPTY_TASKS_MESSAGE}\n        />\n      ) : (\n        availableTasks?.map((task) => {\n          return (\n            <React.Fragment aria-label={task.title} key={task.title}>\n              <CardBuilder>\n                <CardBuilderContent content={task.title} type=\"title\" />\n                <CardBuilderContent\n                  className=\"card-task-description\"\n                  content={task.description}\n                  type=\"body\"\n                />\n                <CardBuilderContent\n                  content={\n                    <Flex direction={{ default: 'column' }}>\n                      <FlexItem>\n                        <a href=\"#\">Download preview of playbook</a>\n                      </FlexItem>\n                      <FlexItem>\n                        <RunTaskButton\n                          task={task}\n                          isFirst\n                          variant=\"primary\"\n                          openTaskModal={openTaskModal}\n                        />\n                      </FlexItem>\n                    </Flex>\n                  }\n                  type=\"footer\"\n                />\n              </CardBuilder>\n              <br />\n            </React.Fragment>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nAvailableTasksTable.propTypes = {\n  availableTasks: propTypes.array,\n  error: propTypes.object,\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasksTable;\n","import React, { useState, useLayoutEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { fetchAvailableTasks } from '../../../api';\nimport CardBuilder, {\n  CardBuilderContent,\n} from '../../PresentationalComponents/CardBuilder/CardBuilder';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport AvailableTasksTable from './AvailableTasksTable';\nimport { LOADING_CONTENT } from '../../constants';\nimport { dispatchNotification } from '../../Utilities/Dispatcher';\n\nexport const LoadingTasks = () => {\n  const loadingTasks = LOADING_CONTENT;\n  return loadingTasks?.map((task, index) => {\n    return (\n      <React.Fragment key={`loading-${index}`}>\n        <CardBuilder>\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"title\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"body\"\n          />\n          <CardBuilderContent\n            content={<Skeleton size={SkeletonSize.md} />}\n            type=\"footer\"\n          />\n        </CardBuilder>\n        <br />\n      </React.Fragment>\n    );\n  });\n};\n\nconst AvailableTasks = ({ openTaskModal }) => {\n  const [availableTasks, setAvailableTasks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const setTasks = (result) => {\n    if (result?.response?.status && result?.response?.status !== 200) {\n      setError(result);\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error',\n        description: result.message,\n        dismissable: true,\n      });\n    } else {\n      setAvailableTasks(result);\n    }\n\n    setIsLoading(false);\n  };\n\n  useLayoutEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await fetchAvailableTasks();\n\n      setTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div aria-label=\"available-tasks\">\n      {isLoading ? (\n        <LoadingTasks />\n      ) : (\n        <AvailableTasksTable\n          availableTasks={availableTasks}\n          error={error}\n          openTaskModal={openTaskModal}\n        />\n      )}\n    </div>\n  );\n};\n\nAvailableTasks.propTypes = {\n  openTaskModal: propTypes.func,\n};\n\nexport default AvailableTasks;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  renderColumnComponent,\n  renderRunDateTime,\n} from '../../Utilities/helpers';\n\nconst TaskNameCell = ({ id, title }, index) => (\n  <Link key={`task-title-${index}`} to={`/executed/${id}`}>\n    {title}\n  </Link>\n);\n\nTaskNameCell.propTypes = {\n  id: propTypes.number,\n  title: propTypes.string,\n  index: propTypes.number,\n};\n\nexport const TaskColumn = {\n  title: 'Task',\n  props: {\n    width: 35,\n  },\n  sortByProp: 'title',\n  renderExport: (task) => task.title,\n  renderFunc: renderColumnComponent(TaskNameCell),\n};\n\nexport const SystemsCountColumn = {\n  title: 'Systems',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'system_count',\n  renderExport: (task) => task.system_count,\n};\n\nexport const RunDateTimeColumn = {\n  title: 'Run date/time',\n  props: {\n    width: 20,\n  },\n  sortByProp: 'run_date_time',\n  renderExport: (task) => renderRunDateTime(task.run_date_time),\n};\n\nexport const exportableColumns = [\n  TaskColumn,\n  SystemsCountColumn,\n  RunDateTimeColumn,\n];\n\nexport default [TaskColumn, SystemsCountColumn, RunDateTimeColumn];\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const nameFilter = {\n  type: conditionalFilterType.text,\n  label: 'Task',\n  filter: (tasks, value) =>\n    tasks.filter((task) =>\n      task.title.toLowerCase().includes(value.toLowerCase())\n    ),\n};\n","import React, { useState, useEffect } from 'react';\nimport TasksTables from '../../Utilities/hooks/useTableTools/Components/TasksTables';\nimport columns, { exportableColumns } from './Columns';\n//import { fetchExecutedTasks } from '../../../api';\nimport { completedTasksTableItems } from '../../Utilities/hooks/useTableTools/Components/__tests__/TasksTable.fixtures';\nimport * as Filters from './Filters';\nimport { renderRunDateTime } from '../../Utilities/helpers';\nimport { TASKS_TABLE_DEFAULTS } from '../../constants';\n\nconst CompletedTasksTable = () => {\n  const filters = Object.values(Filters);\n  const [completedTasks, setCompletedTasks] = useState([]);\n\n  useEffect(() => {\n    const fetchData = () => {\n      //const result = fetchExecutedTasks();\n      const result = completedTasksTableItems;\n      result.map((task) => (task.run_date_time = renderRunDateTime(task.end)));\n\n      setCompletedTasks(result);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <TasksTables\n      label=\"completed-tasks\"\n      ouiaId=\"completed-tasks-table\"\n      columns={columns}\n      items={completedTasks}\n      filters={{\n        filterConfig: filters,\n      }}\n      options={{\n        ...TASKS_TABLE_DEFAULTS,\n        exportable: {\n          ...TASKS_TABLE_DEFAULTS.exportable,\n          columns: exportableColumns,\n        },\n      }}\n      //emptyRows={emptyRows}\n      isStickyHeader\n    />\n  );\n};\n\nexport default CompletedTasksTable;\n","import React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { StackItem, Stack } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { TasksTabs } from '../../PresentationalComponents';\nimport RunTaskModal from '../RunTaskModal/RunTaskModal';\nimport {\n  TASKS_PAGE_HEADER,\n  TASKS_PAGE_HEADER_FLEX_PROPS,\n  TASKS_PAGE_TABS,\n} from '../../constants';\nimport FlexibleFlex from '../../PresentationalComponents/FlexibleFlex/FlexibleFlex';\nimport AvailableTasks from '../AvailableTasks/AvailableTasks';\nimport CompletedTasksTable from '../../SmartComponents/CompletedTasksTable/CompletedTasksTable';\n\nimport './tasks-page.scss';\n\nconst TasksPage = ({ tab }) => {\n  const history = useHistory();\n  const [tabIndex, setTab] = useState(tab);\n  const [runTaskModalOpened, setRunTaskModalOpened] = useState(false);\n  const [activeTask, setActiveTask] = useState({});\n\n  useEffect(() => {\n    if (tab === 0) {\n      history.push('available');\n    }\n  }, []);\n\n  const updateTab = (event, index) => {\n    history.push(index ? 'executed' : 'available');\n    setTab(index);\n  };\n\n  const openTaskModal = (task) => {\n    setRunTaskModalOpened(true);\n    setActiveTask(task);\n  };\n\n  return (\n    <React.Fragment>\n      <RunTaskModal\n        task={activeTask}\n        isOpen={runTaskModalOpened}\n        setModalOpened={setRunTaskModalOpened}\n      />\n      <PageHeader>\n        <FlexibleFlex\n          flexContents={TASKS_PAGE_HEADER}\n          flexProps={TASKS_PAGE_HEADER_FLEX_PROPS}\n        />\n      </PageHeader>\n      <TasksTabs\n        className=\"tabs-background\"\n        tabIndex={tabIndex}\n        updateTab={updateTab}\n        tabsList={TASKS_PAGE_TABS}\n      />\n      <Main>\n        <Stack hasGutter>\n          <StackItem>\n            {tabIndex === 0 ? (\n              <AvailableTasks openTaskModal={openTaskModal} />\n            ) : (\n              <CompletedTasksTable />\n            )}\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nTasksPage.propTypes = {\n  tab: propTypes.number,\n};\n\nexport default TasksPage;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TasksTabs","className","tabIndex","tabsList","updateTab","Tabs","activeKey","onSelect","map","tabName","index","Tab","id","key","eventKey","title","TabTitleText","propTypes","PropTypes","systemColumns","sortKey","props","defaultOnLoad","columns","getRegistry","INVENTORY_ACTION_TYPES","mergeWithEntities","register","entitiesReducer","page","perPage","sortBy","direction","getTasks","async","path","response","request","catch","error","status","data","buildFilterSortString","limit","offset","orderBy","orderDirection","filters","limitOffsetString","sortString","order","buildSortString","filterString","displayNameFilter","hostnameOrId","buildFilterString","useGetEntities","selectedIds","_items","per_page","filterSortString","fetchedEntities","count","meta","results","entity","selected","includes","total","_a","component","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","concat","__assign","assign","n","arguments","apply","this","BaseInvTable","history","useHistory","store","useStore","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","InvTable","defaultProps","Bullseye","Spinner","size","SystemTable","selectIds","inventory","useRef","useContext","RegistryContext","dispatch","useDispatch","type","current","onRefreshData","InventoryTable","isFullView","autoRefresh","initialLoading","showTags","hideFilters","all","defaultColumns","column","isStringCol","defaultColumn","find","defaultCol","onLoad","getEntities","tableProps","canSelectAll","isStickyHeader","RunTaskModal","task","isOpen","setModalOpened","useState","setSelectedIds","payload","Modal","onClose","Flex","FlexItem","style","paddingBottom","description","href","_event","_isSelected","_index","newSelectedIds","splice","push","CardBuilderContent","content","findChild","children","child","CardBuilder","cardClass","Array","isArray","Card","CardTitle","CardBody","CardFooter","RunTaskButton","classname","isFirst","openTaskModal","variant","Button","slug","onClick","EmptyStateDisplay","button","color","icon","isSmall","text","EmptyState","EmptyStateVariant","EmptyStateIcon","Title","headingLevel","EmptyStateBody","line","AvailableTasksTable","availableTasks","ExclamationCircleIcon","TASKS_ERROR","message","default","EMPTY_TASKS_TITLE","EMPTY_TASKS_MESSAGE","LoadingTasks","loadingTasks","LOADING_CONTENT","Skeleton","SkeletonSize","AvailableTasks","setAvailableTasks","isLoading","setIsLoading","setError","setTasks","result","dispatchNotification","dismissable","useLayoutEffect","fetchData","TaskNameCell","Link","to","TaskColumn","sortByProp","renderExport","renderFunc","renderColumnComponent","SystemsCountColumn","system_count","RunDateTimeColumn","renderRunDateTime","run_date_time","exportableColumns","nameFilter","conditionalFilterType","label","filter","tasks","value","toLowerCase","values","Filters","completedTasks","setCompletedTasks","completedTasksTableItems","end","TasksTables","ouiaId","items","filterConfig","options","TASKS_TABLE_DEFAULTS","exportable","TasksPage","tab","setTab","runTaskModalOpened","setRunTaskModalOpened","activeTask","setActiveTask","PageHeader","FlexibleFlex","flexContents","TASKS_PAGE_HEADER","flexProps","TASKS_PAGE_HEADER_FLEX_PROPS","event","TASKS_PAGE_TABS","Main","Stack","hasGutter","StackItem"],"sourceRoot":""}